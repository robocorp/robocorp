name: Action Server [BINARY] Release

on:
  workflow_dispatch:
    # Enables manual triggering via GitHub Actions

  push:
    # branches:
    #   - wip2
    tags:
      - "robocorp-action_server-*"


defaults:
  run:
    working-directory: './action_server'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
  
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          registry-url: "https://npm.pkg.github.com"
          scope: "@robocorp"


      - name: Install cibuildwheel
        run: |
            python -m pip install poetry
            python -m pip install invoke
            python -m invoke build-frontend
        env:
           CI: true
           NODE_AUTH_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        
      - name: Build binary
        run: |
            python -m pip install pyoxidizer
            cd build-binary
            pyoxidizer run --release
        env:
           RC_ACTION_SERVER_FORCE_DOWNLOAD_RCC: true
           RC_ACTION_SERVER_DO_SELFTEST: true

      - name: Action Server Python Binary Signing [Windows]
        if: matrix.os == 'windows-2019'
        env:
          NODE_AUTH_TOKEN: ${{secrets.CI_GITHUB_TOKEN}}
          VAULT_URL: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_URL}}
          CLIENT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_ID}}
          TENANT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_TENANT_ID}}
          CLIENT_SECRET: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_SECRET}}
          CERTIFICATE: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CERTIFICATE}}
        run: |
          dotnet tool install --global AzureSignTool --version 3.0.0
          azuresigntool sign --description-url "https://robocorp.com" --file-digest sha256 --azure-key-vault-url $Env:VAULT_URL --azure-key-vault-client-id $Env:CLIENT_ID --azure-key-vault-tenant-id $Env:TENANT_ID --azure-key-vault-client-secret $Env:CLIENT_SECRET --azure-key-vault-certificate $Env:CERTIFICATE --timestamp-rfc3161 http://timestamp.digicert.com --timestamp-digest sha256 build-binary\build\x86_64-pc-windows-msvc\release\install\action-server.exe
        shell: powershell

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-binaries
          path: "action_server/build-binary/build/*"

      # Having a separate artifact for version.txt helps downstream workflows
      - name: Get version
        if: matrix.os == 'ubuntu-20.04'
        run: |
            poetry version | awk '{print $2}' > version.txt
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-20.04'
        with:
          name: action-server-version
          path: "action_server/version.txt"

      - name: Copy assets [Linux]
        if: matrix.os == 'ubuntu-20.04'
        run: |
            cp -R build-binary/build/x86_64-unknown-linux-gnu/release/install/* go-wrapper/assets
      - name: Copy assets [Mac]
        if: matrix.os == 'macos-11'
        run: |
            cp -R build-binary/build/x86_64-apple-darwin/release/install/* go-wrapper/assets
      - name: Copy assets [Windows]
        if: matrix.os == 'windows-2019'
        run: |
            xcopy /e /h /i build-binary\\build\\x86_64-pc-windows-msvc\\release\\install go-wrapper\\assets

      - uses: actions/download-artifact@v4
        with:
          name: action-server-version
          path: "action_server/go-wrapper/assets"
      
      - name: Build Go binary wrapper
        run: |
            cd go-wrapper
            go build -o action-server-unsigned

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-action-server-unsigned
          path: "action_server/go-wrapper/action-server-unsigned"

  sign-macos:
    needs:
      - build
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    defaults:
      run:
        working-directory: ./action_server
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
            name: macOS-action-server-unsigned
            path: action_server/build

      - uses: actions/download-artifact@v4
        with:
          name: action-server-version
          path: "action_server"
      
      - name: Set Version for Brew
        id: set_version
        run: |
          VERSION=$(cat version.txt)
          echo "Version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Action Server Signing [macOS]
        env:
          APPLEID: ${{ secrets.MACOS_APP_ID_FOR_SIGNING }}
          APPLEIDPASS: ${{ secrets.MACOS_APP_ID_PASS_FOR_SIGNING }}
          APPLETEAMID: ${{ secrets.MACOS_TEAM_ID_FOR_NOTARIZATION }}
          MACOS_SIGNING_CERT: ${{ secrets.MACOS_SIGNING_CERT }}
          MACOS_SIGNING_CERT_PASSWORD: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}
        run: |
          # sign MacOS binary
          security create-keychain -p "$MACOS_SIGNING_CERT_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_SIGNING_CERT_PASSWORD" build.keychain
          echo $MACOS_SIGNING_CERT | base64 --decode -o cert.p12
          security import cert.p12 -A -P $MACOS_SIGNING_CERT_PASSWORD
          security set-key-partition-list -S apple-tool:,apple: -s -k "$MACOS_SIGNING_CERT_PASSWORD" build.keychain
          ls -la build/
          codesign --verbose=4 --entitlements entitlements.mac.plist --deep --force -o runtime -s "Robocorp Technologies, Inc." --timestamp build/action-server-unsigned
          codesign --verify --deep --verbose=2 build/action-server-unsigned
          codesign -v --verbose=4 --display build/action-server-unsigned
          # notarize MacOS binary (zipped because notarization does not allow executable files)
          zip action-server.zip build/action-server-unsigned
          xcrun notarytool submit --apple-id $APPLEID --team-id $APPLETEAMID --password $APPLEIDPASS action-server.zip
          unzip -o action-server.zip -d build/
          mv build/action-server-unsigned build/action-server

      - uses: actions/upload-artifact@v4
        with:
          name: action-server-signed-macos
          path: action_server/build/action-server

  sign-windows:
    needs:
      - build
    defaults:
      run:
        working-directory: ./action_server
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
            name: Windows-action-server-unsigned
            path: action_server/build

      - name: Action Server Signing [Windows]
        env:
          NODE_AUTH_TOKEN: ${{secrets.CI_GITHUB_TOKEN}}
          VAULT_URL: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_URL}}
          CLIENT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_ID}}
          TENANT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_TENANT_ID}}
          CLIENT_SECRET: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_SECRET}}
          CERTIFICATE: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CERTIFICATE}}
        run: |
          dotnet tool install --global AzureSignTool --version 3.0.0
          mv build\action-server-unsigned build\action-server.exe
          azuresigntool sign --description-url "https://robocorp.com" --file-digest sha256 --azure-key-vault-url $Env:VAULT_URL --azure-key-vault-client-id $Env:CLIENT_ID --azure-key-vault-tenant-id $Env:TENANT_ID --azure-key-vault-client-secret $Env:CLIENT_SECRET --azure-key-vault-certificate $Env:CERTIFICATE --timestamp-rfc3161 http://timestamp.digicert.com --timestamp-digest sha256 build\action-server.exe
        shell: powershell

      - uses: actions/upload-artifact@v4
        with:
          name: action-server-signed-windows
          path: action_server/build/action-server.exe

  deploy-s3:
    needs:
      - sign-macos
      - sign-windows
    defaults:
      run:
        working-directory: ./action_server
    runs-on: ubuntu-latest
    outputs:
      is_beta: ${{ steps.check_beta.outputs.is_beta }}

    steps:
      - uses: actions/checkout@v4

      - name: Check if this is a beta release
        id: check_beta
        run: |
          is_beta=${{ endsWith(github.ref_name, '-beta') }}
          echo "is_beta: $is_beta"
          echo "::set-output name=is_beta::$is_beta"

      - uses: actions/download-artifact@v4
        with:
            name: action-server-signed-windows
            path: action_server/build/windows64/
      - uses: actions/download-artifact@v4
        with:
            name: action-server-signed-macos
            path: action_server/build/macos64/
      - uses: actions/download-artifact@v4
        with:
            name: Linux-action-server-unsigned
            path: action_server/build/linux64/
      - uses: actions/download-artifact@v4
        with:
            name: action-server-version
            path: action_server/build/
      - run: |
          ls -l
          pwd
          ls -l build
          mkdir s3-drop
          # We need to rename the linux binary because the others are renamed during signing
          mv build/linux64/action-server-unsigned build/linux64/action-server
          mv build/version.txt s3-drop/
          mv build/macos64 s3-drop/
          mv build/linux64 s3-drop/
          mv build/windows64 s3-drop/
          ls -l s3-drop/
          ver=`cat s3-drop/version.txt`
          echo "actionServerVersion=${ver}" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v4
        with:
          name: action-server-artifacts-for-s3-${{ env.actionServerVersion }}
          path: action_server/s3-drop
      - name: Configure AWS credentials Dropbox bucket [Non-Beta]
        if: ${{ steps.check_beta.outputs.is_beta == 'false' }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CICD_DROPBOX }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CICD_DROPBOX }}
            aws-region: eu-west-1
      - name: Configure AWS credentials Downloads bucket [Beta]
        if: ${{ steps.check_beta.outputs.is_beta == 'true' }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DOWNLOADS_INDEX_UPDATER }}
            aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_DOWNLOADS_INDEX_UPDATER }}
            aws-region: eu-west-1
      - name: AWS S3 copies
        run: |
          if [ "${{ !steps.check_beta.outputs.is_beta }}" = "true" ]; then
            echo "Normal release, aws sync to drop-box, full pipeline"
            aws s3 sync s3-drop s3://robocorp-action-server-build-drop-box
          else
            echo "BETA RELEASE, only copy the executable for testing"
            S3_BASE_URL="s3://downloads.robocorp.com/action-server/beta"
            aws s3 cp s3-drop/version.txt $S3_BASE_URL/version.txt --cache-control max-age=120 --content-type "text/plain"
            aws s3 cp s3-drop/windows64/action-server.exe $S3_BASE_URL/windows64/action-server.exe --cache-control max-age=120 --content-type "application/octet-stream"
            aws s3 cp s3-drop/macos64/action-server $S3_BASE_URL/macos64/action-server --cache-control max-age=120 --content-type "application/octet-stream"
            aws s3 cp s3-drop/linux64/action-server $S3_BASE_URL/linux64/action-server --cache-control max-age=120 --content-type "application/octet-stream"
          fi
          
  trigger-brew-workflow:
    needs:
      # sign-macos needs to be explicit in order to get the version, even if it's implied
      - sign-macos
      - deploy-s3
    defaults:
      run:
        working-directory: .
    
    # No Brew run for beta -releases
    if: ${{ needs.deploy-s3.outputs.is_beta == 'false' }}

    runs-on: ubuntu-latest

    steps:
      - name: Wait for Downloads S3 Bucket to have the right content
        timeout-minutes: 5
        run: |
          VERSION_URL="https://downloads.robocorp.com/action-server/releases/latest/version.txt"
          EXPECTED_VERSION=${{ needs.sign-macos.outputs.version }}

          while true; do
            DOWNLOADED_VERSION=$(curl -sS $VERSION_URL)
            echo "Downloaded version: $DOWNLOADED_VERSION"
            echo "Expected version: $EXPECTED_VERSION"

            if [ "$DOWNLOADED_VERSION" = "$EXPECTED_VERSION" ]; then
              echo "Versions match."
              break
            else
              echo "Versions do not match. Retrying in 30 seconds."
            fi

            sleep 30
          done
      - name: Trigger Brew Deploy Workflow
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GHA_TO_OTHER_REPO }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/robocorp/packaging/actions/workflows/action-server_brew.yml/dispatches \
            -d '{"ref":"master","inputs":{"version":"${{ needs.sign-macos.outputs.version }}"}}'

  release:

    if: ${{ needs.deploy-s3.outputs.is_beta == 'false' }}

    needs:
      - deploy-s3  # needed for is_beta
      - trigger-brew-workflow
    
    defaults:
      run:
        working-directory: .
    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub release
        uses: Roang-zero1/github-create-release-action@v3
        with:
          release_title: ${{ github.ref_name }}
          changelog_file: action_server/docs/CHANGELOG.md
          release_text: Binaries available as assets. Run `action-server -h` for usage instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v4
        with:
            name: action-server-signed-windows
            path: windows64/
      - uses: actions/download-artifact@v4
        with:
            name: action-server-signed-macos
            path: macos64/
      - uses: actions/download-artifact@v4
        with:
            name: Linux-action-server-unsigned
            path: linux64/
      - name: Rename Linux binary
        run: mv linux64/action-server-unsigned linux64/action-server

      # Upload binaries to release

      - name: Upload Linux binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./linux64/action-server
          asset_name: $tag-linux64
          tag: ${{ github.ref }}
          overwrite: true
      - name: Upload MacOS binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./macos64/action-server
          asset_name: $tag-macos64
          tag: ${{ github.ref }}
          overwrite: true
      - name: Upload Windows binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./windows64/action-server.exe
          asset_name: $tag-windows64
          tag: ${{ github.ref }}
          overwrite: true

