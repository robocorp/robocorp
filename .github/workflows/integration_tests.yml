# Note: auto-generated by `_gen_workflows.py`
name: Integration Tests
'on':
  push:
    branches:
    - master
    - wip
    paths:
    - integration_tests/**
    - .github/workflows/integration_tests.yml
    - devutils/**
    - log/**
    - browser/**
    - tasks/**
  pull_request:
    branches:
    - master
    paths:
    - integration_tests/**
    - .github/workflows/integration_tests.yml
    - devutils/**
    - log/**
    - browser/**
    - tasks/**
defaults:
  run:
    working-directory: ./integration_tests
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name:
        - ubuntu-py3.9-devmode
        - windows-py3.9-devmode
        - macos-py3.9-devmode
        include:
        - name: ubuntu-py3.9-devmode
          python: '3.9'
          os: ubuntu-latest
        - name: windows-py3.9-devmode
          python: '3.9'
          os: windows-latest
        - name: macos-py3.9-devmode
          os: macos-latest
          python: '3.9'
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
    - name: Install poetry
      run: pipx install poetry
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
        cache: poetry
    - name: Install devutils requirements
      run: python -m pip install -r ../devutils/requirements.txt
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        registry-url: https://npm.pkg.github.com
        scope: '@robocorp'
    - name: Install project (not dev)
      if: contains(matrix.name, '-devmode') == false
      run: inv install
    - name: Install project (dev)
      if: contains(matrix.name, '-devmode')
      run: inv devinstall
    - name: npm ci
      working-directory: ./log/output-react/
      if: contains(matrix.name, '-devmode')
      run: npm ci
      env:
        CI: true
        NODE_AUTH_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    - name: Print robocorp-log info and build the output view.
      if: contains(matrix.name, '-devmode')
      run: '

        poetry run python -c "import sys;print(''\n''.join(str(x) for x in sys.path))"

        poetry run python -c "from robocorp import log;print(log.__file__)"

        cd ../log

        inv build-output-view-react

        '
      env:
        CI: true
        NODE_AUTH_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    - name: Test
      env:
        GITHUB_ACTIONS_MATRIX_NAME: ${{ matrix.name }}
        CI_CREDENTIALS: ${{ secrets.CI_CREDENTIALS }}
        CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
      run: inv test
    - name: '`inv lint`, potentially fixed with `inv pretty`'
      if: always()
      run: '

        inv lint

        '
    - name: '`inv typecheck`'
      if: always()
      run: '

        inv typecheck

        '
    - name: '`inv docs` with checking on files changed'
      if: always()
      run: '

        inv docs --check

        '
