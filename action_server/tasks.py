import os
import sys
from contextlib import contextmanager
from pathlib import Path
from typing import Optional

# Add the devutils even if the poetry env isn't setup (to do a 'inv devinstall').
try:
    import devutils

    devutils_found = True
except ImportError:
    devutils_src = Path(__file__).absolute().parent.parent / "devutils" / "src"
    devutils_found = devutils_src.exists()

    if not devutils_found:
        print(f"{devutils_src} does not exist.", file=sys.stderr)
    else:
        sys.path.append(str(devutils_src))

if devutils_found:
    from devutils.invoke_utils import build_common_tasks

    globals().update(
        build_common_tasks(
            Path(__file__).absolute().parent,
            "robocorp.action_server",
            ruff_format_arguments=r"--exclude=_static_contents.py",
        )
    )

from invoke import Context, task

CURDIR = Path(__file__).parent.absolute()


@contextmanager
def chdir(path: Path):
    old = Path.cwd()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(old)


def run(ctx: Context, *args: str, **options):
    cmd = " ".join(args)
    options.setdefault("pty", sys.platform != "win32")
    options.setdefault("echo", True)
    ctx.run(cmd, **options)


@task
def build_frontend(ctx: Context, debug: bool = False, install: bool = True):
    """Build static .html frontend"""
    with chdir(CURDIR / "frontend"):
        if install:
            run(ctx, "npm", "ci", "--no-audit", "--no-fund")
        if debug:
            run(ctx, "npm", "run", "build:debug")
        else:
            run(ctx, "npm", "run", "build")

    index_src = CURDIR / "frontend" / "dist" / "index.html"
    assert index_src.exists(), f"Expected: {index_src} to exist."
    dest_static_contents = (
        CURDIR / "src" / "robocorp" / "action_server" / "_static_contents.py"
    )

    file_contents = {"index.html": index_src.read_bytes()}

    with open(dest_static_contents, "w", encoding="utf-8") as stream:
        print(f"Writing static contents to: {dest_static_contents}")
        stream.write(
            f"""# coding: utf-8
# Note: autogenerated file.
# To regenerate this file use: inv built-frontend.

# The FILE_CONTENTS contains the contents of the files with
# html/javascript code for the static assets we use.

FILE_CONTENTS = {repr(file_contents)}
"""
        )


@task
def download_rcc(ctx: Context, system: Optional[str] = None) -> None:
    """
    Downloads RCC in the place where the action server expects it
    """
    env = os.environ.copy()
    curr_pythonpath = env.get("PYTHONPATH", "")
    env["PYTHONPATH"] = curr_pythonpath + os.pathsep + str(CURDIR / "src")
    run(ctx, "python -m robocorp.action_server download-rcc", env=env)
