# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from openapi_client.models.add_worker_to_group_request import AddWorkerToGroupRequest
from openapi_client.models.create_worker_group_link_token_request import CreateWorkerGroupLinkTokenRequest
from openapi_client.models.delete_worker200_response import DeleteWorker200Response
from openapi_client.models.list_worker_group_link_tokens200_response import ListWorkerGroupLinkTokens200Response
from openapi_client.models.list_worker_groups200_response import ListWorkerGroups200Response
from openapi_client.models.update_worker_request import UpdateWorkerRequest
from openapi_client.models.worker_group_link_token_resource import WorkerGroupLinkTokenResource
from openapi_client.models.worker_group_resource import WorkerGroupResource
from openapi_client.models.worker_to_group_link_listing import WorkerToGroupLinkListing

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WorkerGroupApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_worker_to_group(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to add the worker to")], add_worker_to_group_request : Annotated[AddWorkerToGroupRequest, Field(..., description="The id of the worker to add to the worker group ")], **kwargs) -> WorkerToGroupLinkListing:  # noqa: E501
        """Add worker to worker group  # noqa: E501

        Adds an existing worker to the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_worker_to_group(workspace_id, worker_group_id, add_worker_to_group_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to add the worker to (required)
        :type worker_group_id: str
        :param add_worker_to_group_request: The id of the worker to add to the worker group  (required)
        :type add_worker_to_group_request: AddWorkerToGroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerToGroupLinkListing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_worker_to_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_worker_to_group_with_http_info(workspace_id, worker_group_id, add_worker_to_group_request, **kwargs)  # noqa: E501

    @validate_arguments
    def add_worker_to_group_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to add the worker to")], add_worker_to_group_request : Annotated[AddWorkerToGroupRequest, Field(..., description="The id of the worker to add to the worker group ")], **kwargs) -> ApiResponse:  # noqa: E501
        """Add worker to worker group  # noqa: E501

        Adds an existing worker to the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_worker_to_group_with_http_info(workspace_id, worker_group_id, add_worker_to_group_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to add the worker to (required)
        :type worker_group_id: str
        :param add_worker_to_group_request: The id of the worker to add to the worker group  (required)
        :type add_worker_to_group_request: AddWorkerToGroupRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerToGroupLinkListing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id',
            'add_worker_to_group_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_worker_to_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['add_worker_to_group_request'] is not None:
            _body_params = _params['add_worker_to_group_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/workers', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_worker_group(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace under which the worker group should be created.")], update_worker_request : Annotated[UpdateWorkerRequest, Field(..., description="The name of the worker group to create")], **kwargs) -> WorkerGroupResource:  # noqa: E501
        """Create worker group  # noqa: E501

        Creates a new worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_worker_group(workspace_id, update_worker_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace under which the worker group should be created. (required)
        :type workspace_id: str
        :param update_worker_request: The name of the worker group to create (required)
        :type update_worker_request: UpdateWorkerRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerGroupResource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_worker_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_worker_group_with_http_info(workspace_id, update_worker_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_worker_group_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace under which the worker group should be created.")], update_worker_request : Annotated[UpdateWorkerRequest, Field(..., description="The name of the worker group to create")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create worker group  # noqa: E501

        Creates a new worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_worker_group_with_http_info(workspace_id, update_worker_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace under which the worker group should be created. (required)
        :type workspace_id: str
        :param update_worker_request: The name of the worker group to create (required)
        :type update_worker_request: UpdateWorkerRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerGroupResource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'update_worker_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_worker_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_worker_request'] is not None:
            _body_params = _params['update_worker_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_worker_group_link_token(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], create_worker_group_link_token_request : Annotated[CreateWorkerGroupLinkTokenRequest, Field(..., description="The name of the worker group link token to create ")], **kwargs) -> WorkerGroupLinkTokenResource:  # noqa: E501
        """Create worker group link token  # noqa: E501

        Generates and returns a link token used to link a worker to the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_worker_group_link_token(workspace_id, worker_group_id, create_worker_group_link_token_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to create  (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerGroupLinkTokenResource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_worker_group_link_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_worker_group_link_token_with_http_info(workspace_id, worker_group_id, create_worker_group_link_token_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_worker_group_link_token_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], create_worker_group_link_token_request : Annotated[CreateWorkerGroupLinkTokenRequest, Field(..., description="The name of the worker group link token to create ")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create worker group link token  # noqa: E501

        Generates and returns a link token used to link a worker to the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_worker_group_link_token_with_http_info(workspace_id, worker_group_id, create_worker_group_link_token_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to create  (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerGroupLinkTokenResource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id',
            'create_worker_group_link_token_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_worker_group_link_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_worker_group_link_token_request'] is not None:
            _body_params = _params['create_worker_group_link_token_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_worker_group(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to delete.")], **kwargs) -> DeleteWorker200Response:  # noqa: E501
        """Delete worker group  # noqa: E501

        Deletes the requested worker group. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_worker_group(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to delete. (required)
        :type worker_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeleteWorker200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_worker_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_worker_group_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_worker_group_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to delete.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete worker group  # noqa: E501

        Deletes the requested worker group. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_worker_group_with_http_info(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to delete. (required)
        :type worker_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeleteWorker200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_worker_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "DeleteWorker200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_worker_group_link_token(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], link_token_id : Annotated[StrictStr, Field(..., description="The id of the worker group link token to delete.")], **kwargs) -> DeleteWorker200Response:  # noqa: E501
        """Delete worker group link token  # noqa: E501

        Deletes the requested link token. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_worker_group_link_token(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to delete. (required)
        :type link_token_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeleteWorker200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_worker_group_link_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_worker_group_link_token_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], link_token_id : Annotated[StrictStr, Field(..., description="The id of the worker group link token to delete.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete worker group link token  # noqa: E501

        Deletes the requested link token. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to delete. (required)
        :type link_token_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeleteWorker200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id',
            'link_token_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_worker_group_link_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']

        if _params['link_token_id']:
            _path_params['link_token_id'] = _params['link_token_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "DeleteWorker200Response",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_worker_group(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to retrieve.")], **kwargs) -> WorkerGroupResource:  # noqa: E501
        """Get worker group  # noqa: E501

        Returns a worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_worker_group(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to retrieve. (required)
        :type worker_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerGroupResource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_worker_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_worker_group_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_worker_group_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to retrieve.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get worker group  # noqa: E501

        Returns a worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_worker_group_with_http_info(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to retrieve. (required)
        :type worker_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerGroupResource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_worker_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerGroupResource",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_worker_group_link_token(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], link_token_id : Annotated[StrictStr, Field(..., description="The id of the worker group link token to retrieve.")], **kwargs) -> WorkerGroupLinkTokenResource:  # noqa: E501
        """Get worker group link token  # noqa: E501

        Returns a link token for the requested work group. **Note**: For security reasons, the Link Token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_worker_group_link_token(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to retrieve. (required)
        :type link_token_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerGroupLinkTokenResource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_worker_group_link_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_worker_group_link_token_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], link_token_id : Annotated[StrictStr, Field(..., description="The id of the worker group link token to retrieve.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get worker group link token  # noqa: E501

        Returns a link token for the requested work group. **Note**: For security reasons, the Link Token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to retrieve. (required)
        :type link_token_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerGroupLinkTokenResource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id',
            'link_token_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_worker_group_link_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']

        if _params['link_token_id']:
            _path_params['link_token_id'] = _params['link_token_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerGroupLinkTokenResource",
            '403': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_worker_group_link_tokens(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link tokens belong.")], **kwargs) -> ListWorkerGroupLinkTokens200Response:  # noqa: E501
        """List worker group link tokens  # noqa: E501

        Returns a list of all link tokens for the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_worker_group_link_tokens(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link tokens belong. (required)
        :type worker_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWorkerGroupLinkTokens200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_worker_group_link_tokens_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_worker_group_link_tokens_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_worker_group_link_tokens_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link tokens belong.")], **kwargs) -> ApiResponse:  # noqa: E501
        """List worker group link tokens  # noqa: E501

        Returns a list of all link tokens for the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_worker_group_link_tokens_with_http_info(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link tokens belong. (required)
        :type worker_group_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWorkerGroupLinkTokens200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_worker_group_link_tokens" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "ListWorkerGroupLinkTokens200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_worker_groups(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace to list worker groups for")], **kwargs) -> ListWorkerGroups200Response:  # noqa: E501
        """List worker groups  # noqa: E501

        Returns a list of all worker groups linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_worker_groups(workspace_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace to list worker groups for (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWorkerGroups200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_worker_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_worker_groups_with_http_info(workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_worker_groups_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace to list worker groups for")], **kwargs) -> ApiResponse:  # noqa: E501
        """List worker groups  # noqa: E501

        Returns a list of all worker groups linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_worker_groups_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace to list worker groups for (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWorkerGroups200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_worker_groups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "ListWorkerGroups200Response",
            '403': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def remove_worker_from_group(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to remove the worker from")], worker_id : Annotated[StrictStr, Field(..., description="The id of the worker to remove from the worker group")], **kwargs) -> WorkerToGroupLinkListing:  # noqa: E501
        """Remove worker from worker group  # noqa: E501

        Removes an existing worker from the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_worker_from_group(workspace_id, worker_group_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to remove the worker from (required)
        :type worker_group_id: str
        :param worker_id: The id of the worker to remove from the worker group (required)
        :type worker_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerToGroupLinkListing
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the remove_worker_from_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.remove_worker_from_group_with_http_info(workspace_id, worker_group_id, worker_id, **kwargs)  # noqa: E501

    @validate_arguments
    def remove_worker_from_group_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to remove the worker from")], worker_id : Annotated[StrictStr, Field(..., description="The id of the worker to remove from the worker group")], **kwargs) -> ApiResponse:  # noqa: E501
        """Remove worker from worker group  # noqa: E501

        Removes an existing worker from the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_worker_from_group_with_http_info(workspace_id, worker_group_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to remove the worker from (required)
        :type worker_group_id: str
        :param worker_id: The id of the worker to remove from the worker group (required)
        :type worker_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerToGroupLinkListing, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id',
            'worker_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_worker_from_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']

        if _params['worker_id']:
            _path_params['worker_id'] = _params['worker_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/workers/{worker_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_worker_group(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to update.")], update_worker_request : Annotated[UpdateWorkerRequest, Field(..., description="The worker group details to update")], **kwargs) -> WorkerGroupResource:  # noqa: E501
        """Update worker group  # noqa: E501

        Updates the requested worker group by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_worker_group(workspace_id, worker_group_id, update_worker_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to update. (required)
        :type worker_group_id: str
        :param update_worker_request: The worker group details to update (required)
        :type update_worker_request: UpdateWorkerRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerGroupResource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_worker_group_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_worker_group_with_http_info(workspace_id, worker_group_id, update_worker_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_worker_group_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to update.")], update_worker_request : Annotated[UpdateWorkerRequest, Field(..., description="The worker group details to update")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update worker group  # noqa: E501

        Updates the requested worker group by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_worker_group_with_http_info(workspace_id, worker_group_id, update_worker_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to update. (required)
        :type worker_group_id: str
        :param update_worker_request: The worker group details to update (required)
        :type update_worker_request: UpdateWorkerRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerGroupResource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id',
            'update_worker_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_worker_group" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_worker_request'] is not None:
            _body_params = _params['update_worker_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_worker_group_link_token(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], link_token_id : Annotated[StrictStr, Field(..., description="The id of the worker group link token to update.")], create_worker_group_link_token_request : Annotated[CreateWorkerGroupLinkTokenRequest, Field(..., description="The name of the worker group link token to update")], **kwargs) -> WorkerGroupLinkTokenResource:  # noqa: E501
        """Update worker group link token  # noqa: E501

        Updates a link token by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_worker_group_link_token(workspace_id, worker_group_id, link_token_id, create_worker_group_link_token_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to update. (required)
        :type link_token_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to update (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkerGroupLinkTokenResource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_worker_group_link_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, create_worker_group_link_token_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_worker_group_link_token_with_http_info(self, workspace_id : Annotated[StrictStr, Field(..., description="The id of the workspace on which the worker group resides.")], worker_group_id : Annotated[StrictStr, Field(..., description="The id of the worker group to which the link token belongs.")], link_token_id : Annotated[StrictStr, Field(..., description="The id of the worker group link token to update.")], create_worker_group_link_token_request : Annotated[CreateWorkerGroupLinkTokenRequest, Field(..., description="The name of the worker group link token to update")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update worker group link token  # noqa: E501

        Updates a link token by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, create_worker_group_link_token_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to update. (required)
        :type link_token_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to update (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkerGroupLinkTokenResource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'worker_group_id',
            'link_token_id',
            'create_worker_group_link_token_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_worker_group_link_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']

        if _params['worker_group_id']:
            _path_params['worker_group_id'] = _params['worker_group_id']

        if _params['link_token_id']:
            _path_params['link_token_id'] = _params['link_token_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_worker_group_link_token_request'] is not None:
            _body_params = _params['create_worker_group_link_token_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['API Key with permissions']  # noqa: E501

        _response_types_map = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
        }

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
