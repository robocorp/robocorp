# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from openapi_client.models.list_assets200_response_data_inner import ListAssets200ResponseDataInner
from openapi_client.models.process_run_resource_started_by import ProcessRunResourceStartedBy

class ProcessRunResource(BaseModel):
    """
    ProcessRunResource
    """
    id: StrictStr = Field(...)
    state: StrictStr = Field(...)
    created_at: datetime = Field(...)
    started_at: Optional[datetime] = Field(...)
    ended_at: Optional[datetime] = Field(...)
    process: ListAssets200ResponseDataInner = Field(...)
    started_by: ProcessRunResourceStartedBy = Field(...)
    duration: Optional[Union[StrictFloat, StrictInt]] = Field(..., description="Process run duration in seconds")
    __properties = ["id", "state", "created_at", "started_at", "ended_at", "process", "started_by", "duration"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('new', 'in_progress', 'completed', 'unresolved', 'stopping'):
            raise ValueError("must be one of enum values ('new', 'in_progress', 'completed', 'unresolved', 'stopping')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProcessRunResource:
        """Create an instance of ProcessRunResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of started_by
        if self.started_by:
            _dict['started_by'] = self.started_by.to_dict()
        # set to None if started_at (nullable) is None
        # and __fields_set__ contains the field
        if self.started_at is None and "started_at" in self.__fields_set__:
            _dict['started_at'] = None

        # set to None if ended_at (nullable) is None
        # and __fields_set__ contains the field
        if self.ended_at is None and "ended_at" in self.__fields_set__:
            _dict['ended_at'] = None

        # set to None if duration (nullable) is None
        # and __fields_set__ contains the field
        if self.duration is None and "duration" in self.__fields_set__:
            _dict['duration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProcessRunResource:
        """Create an instance of ProcessRunResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProcessRunResource.parse_obj(obj)

        _obj = ProcessRunResource.parse_obj({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "created_at": obj.get("created_at"),
            "started_at": obj.get("started_at"),
            "ended_at": obj.get("ended_at"),
            "process": ListAssets200ResponseDataInner.from_dict(obj.get("process")) if obj.get("process") is not None else None,
            "started_by": ProcessRunResourceStartedBy.from_dict(obj.get("started_by")) if obj.get("started_by") is not None else None,
            "duration": obj.get("duration")
        })
        return _obj


