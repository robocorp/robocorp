# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.any_valid_json import AnyValidJson
from openapi_client.models.process_run_callback import ProcessRunCallback

class StartProcessRunRequestOneOf3(BaseModel):
    """
    StartProcessRunRequestOneOf3
    """
    type: StrictStr = Field(...)
    payloads: conlist(AnyValidJson) = Field(...)
    callback: Optional[ProcessRunCallback] = None
    __properties = ["type", "payloads", "callback"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('with_payloads'):
            raise ValueError("must be one of enum values ('with_payloads')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StartProcessRunRequestOneOf3:
        """Create an instance of StartProcessRunRequestOneOf3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in payloads (list)
        _items = []
        if self.payloads:
            for _item in self.payloads:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payloads'] = _items
        # override the default output from pydantic by calling `to_dict()` of callback
        if self.callback:
            _dict['callback'] = self.callback.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StartProcessRunRequestOneOf3:
        """Create an instance of StartProcessRunRequestOneOf3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StartProcessRunRequestOneOf3.parse_obj(obj)

        _obj = StartProcessRunRequestOneOf3.parse_obj({
            "type": obj.get("type"),
            "payloads": [AnyValidJson.from_dict(_item) for _item in obj.get("payloads")] if obj.get("payloads") is not None else None,
            "callback": ProcessRunCallback.from_dict(obj.get("callback")) if obj.get("callback") is not None else None
        })
        return _obj


