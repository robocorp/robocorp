# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.add_worker_to_group_request_worker import AddWorkerToGroupRequestWorker
from openapi_client.models.list_process_run_work_items200_response_data_inner_step_run import ListProcessRunWorkItems200ResponseDataInnerStepRun
from openapi_client.models.work_item_exception import WorkItemException

class ListProcessRunWorkItems200ResponseDataInner(BaseModel):
    """
    ListProcessRunWorkItems200ResponseDataInner
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    state: StrictStr = Field(...)
    state_updated_at: datetime = Field(...)
    process: AddWorkerToGroupRequestWorker = Field(...)
    process_run: AddWorkerToGroupRequestWorker = Field(...)
    step: AddWorkerToGroupRequestWorker = Field(...)
    step_run: Optional[ListProcessRunWorkItems200ResponseDataInnerStepRun] = Field(...)
    exception: Optional[WorkItemException] = Field(...)
    __properties = ["id", "created_at", "state", "state_updated_at", "process", "process_run", "step", "step_run", "exception"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('pending', 'in_progress', 'failed', 'done'):
            raise ValueError("must be one of enum values ('pending', 'in_progress', 'failed', 'done')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListProcessRunWorkItems200ResponseDataInner:
        """Create an instance of ListProcessRunWorkItems200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_run
        if self.process_run:
            _dict['process_run'] = self.process_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of step
        if self.step:
            _dict['step'] = self.step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of step_run
        if self.step_run:
            _dict['step_run'] = self.step_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exception
        if self.exception:
            _dict['exception'] = self.exception.to_dict()
        # set to None if step_run (nullable) is None
        # and __fields_set__ contains the field
        if self.step_run is None and "step_run" in self.__fields_set__:
            _dict['step_run'] = None

        # set to None if exception (nullable) is None
        # and __fields_set__ contains the field
        if self.exception is None and "exception" in self.__fields_set__:
            _dict['exception'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListProcessRunWorkItems200ResponseDataInner:
        """Create an instance of ListProcessRunWorkItems200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListProcessRunWorkItems200ResponseDataInner.parse_obj(obj)

        _obj = ListProcessRunWorkItems200ResponseDataInner.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "state": obj.get("state"),
            "state_updated_at": obj.get("state_updated_at"),
            "process": AddWorkerToGroupRequestWorker.from_dict(obj.get("process")) if obj.get("process") is not None else None,
            "process_run": AddWorkerToGroupRequestWorker.from_dict(obj.get("process_run")) if obj.get("process_run") is not None else None,
            "step": AddWorkerToGroupRequestWorker.from_dict(obj.get("step")) if obj.get("step") is not None else None,
            "step_run": ListProcessRunWorkItems200ResponseDataInnerStepRun.from_dict(obj.get("step_run")) if obj.get("step_run") is not None else None,
            "exception": WorkItemException.from_dict(obj.get("exception")) if obj.get("exception") is not None else None
        })
        return _obj


