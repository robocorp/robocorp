# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.add_worker_to_group_request_worker import AddWorkerToGroupRequestWorker

class ProcessWebhookPayload(BaseModel):
    """
    ProcessWebhookPayload
    """
    endpoint: StrictStr = Field(...)
    enabled_events: conlist(StrictStr) = Field(...)
    process: AddWorkerToGroupRequestWorker = Field(...)
    __properties = ["endpoint", "enabled_events", "process"]

    @validator('enabled_events')
    def enabled_events_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('process_run.started', 'process_run.completed', 'process_run.unresolved'):
                raise ValueError("each list item must be one of ('process_run.started', 'process_run.completed', 'process_run.unresolved')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProcessWebhookPayload:
        """Create an instance of ProcessWebhookPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProcessWebhookPayload:
        """Create an instance of ProcessWebhookPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProcessWebhookPayload.parse_obj(obj)

        _obj = ProcessWebhookPayload.parse_obj({
            "endpoint": obj.get("endpoint"),
            "enabled_events": obj.get("enabled_events"),
            "process": AddWorkerToGroupRequestWorker.from_dict(obj.get("process")) if obj.get("process") is not None else None
        })
        return _obj


