# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from openapi_client.models.add_worker_to_group_request_worker import AddWorkerToGroupRequestWorker
from openapi_client.models.list_assets200_response_data_inner import ListAssets200ResponseDataInner

class WorkerToGroupLinkListing(BaseModel):
    """
    WorkerToGroupLinkListing
    """
    worker: AddWorkerToGroupRequestWorker = Field(...)
    worker_groups: conlist(ListAssets200ResponseDataInner) = Field(...)
    __properties = ["worker", "worker_groups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkerToGroupLinkListing:
        """Create an instance of WorkerToGroupLinkListing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in worker_groups (list)
        _items = []
        if self.worker_groups:
            for _item in self.worker_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['worker_groups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkerToGroupLinkListing:
        """Create an instance of WorkerToGroupLinkListing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkerToGroupLinkListing.parse_obj(obj)

        _obj = WorkerToGroupLinkListing.parse_obj({
            "worker": AddWorkerToGroupRequestWorker.from_dict(obj.get("worker")) if obj.get("worker") is not None else None,
            "worker_groups": [ListAssets200ResponseDataInner.from_dict(_item) for _item in obj.get("worker_groups")] if obj.get("worker_groups") is not None else None
        })
        return _obj


