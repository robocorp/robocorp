# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CreateWorkerGroupLinkTokenRequest(BaseModel):
    """
    CreateWorkerGroupLinkTokenRequest
    """
    name: StrictStr = Field(...)
    expires_at: Optional[datetime] = Field(...)
    __properties = ["name", "expires_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateWorkerGroupLinkTokenRequest:
        """Create an instance of CreateWorkerGroupLinkTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if expires_at (nullable) is None
        # and __fields_set__ contains the field
        if self.expires_at is None and "expires_at" in self.__fields_set__:
            _dict['expires_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateWorkerGroupLinkTokenRequest:
        """Create an instance of CreateWorkerGroupLinkTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateWorkerGroupLinkTokenRequest.parse_obj(obj)

        _obj = CreateWorkerGroupLinkTokenRequest.parse_obj({
            "name": obj.get("name"),
            "expires_at": obj.get("expires_at")
        })
        return _obj


