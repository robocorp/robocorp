# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.process_run_resource_started_by_details import ProcessRunResourceStartedByDetails

class ProcessRunResourceStartedBy(BaseModel):
    """
    ProcessRunResourceStartedBy
    """
    type: StrictStr = Field(...)
    details: Optional[ProcessRunResourceStartedByDetails] = Field(...)
    __properties = ["type", "details"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('api', 'user', 'schedule', 'email'):
            raise ValueError("must be one of enum values ('api', 'user', 'schedule', 'email')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProcessRunResourceStartedBy:
        """Create an instance of ProcessRunResourceStartedBy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # set to None if details (nullable) is None
        # and __fields_set__ contains the field
        if self.details is None and "details" in self.__fields_set__:
            _dict['details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProcessRunResourceStartedBy:
        """Create an instance of ProcessRunResourceStartedBy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProcessRunResourceStartedBy.parse_obj(obj)

        _obj = ProcessRunResourceStartedBy.parse_obj({
            "type": obj.get("type"),
            "details": ProcessRunResourceStartedByDetails.from_dict(obj.get("details")) if obj.get("details") is not None else None
        })
        return _obj


