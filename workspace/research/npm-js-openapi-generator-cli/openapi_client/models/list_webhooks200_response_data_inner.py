# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.list_process_run_work_items200_response_data_inner_step_run import ListProcessRunWorkItems200ResponseDataInnerStepRun

class ListWebhooks200ResponseDataInner(BaseModel):
    """
    ListWebhooks200ResponseDataInner
    """
    id: StrictStr = Field(...)
    process: Optional[ListProcessRunWorkItems200ResponseDataInnerStepRun] = Field(...)
    enabled_events: conlist(StrictStr) = Field(...)
    endpoint: StrictStr = Field(...)
    __properties = ["id", "process", "enabled_events", "endpoint"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListWebhooks200ResponseDataInner:
        """Create an instance of ListWebhooks200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # set to None if process (nullable) is None
        # and __fields_set__ contains the field
        if self.process is None and "process" in self.__fields_set__:
            _dict['process'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListWebhooks200ResponseDataInner:
        """Create an instance of ListWebhooks200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListWebhooks200ResponseDataInner.parse_obj(obj)

        _obj = ListWebhooks200ResponseDataInner.parse_obj({
            "id": obj.get("id"),
            "process": ListProcessRunWorkItems200ResponseDataInnerStepRun.from_dict(obj.get("process")) if obj.get("process") is not None else None,
            "enabled_events": obj.get("enabled_events"),
            "endpoint": obj.get("endpoint")
        })
        return _obj


