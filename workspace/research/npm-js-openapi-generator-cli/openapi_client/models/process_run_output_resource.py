# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.any_valid_json import AnyValidJson
from openapi_client.models.work_item_file import WorkItemFile

class ProcessRunOutputResource(BaseModel):
    """
    ProcessRunOutputResource
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    process: Dict[str, Any] = Field(...)
    process_run: Dict[str, Any] = Field(...)
    payload: AnyValidJson = Field(...)
    files: conlist(WorkItemFile) = Field(...)
    __properties = ["id", "created_at", "process", "process_run", "payload", "files"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProcessRunOutputResource:
        """Create an instance of ProcessRunOutputResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_run
        if self.process_run:
            _dict['process_run'] = self.process_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProcessRunOutputResource:
        """Create an instance of ProcessRunOutputResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProcessRunOutputResource.parse_obj(obj)

        _obj = ProcessRunOutputResource.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "process": ProcessReferenceResource.from_dict(obj.get("process")) if obj.get("process") is not None else None,
            "process_run": ProcessRunReferenceResource.from_dict(obj.get("process_run")) if obj.get("process_run") is not None else None,
            "payload": AnyValidJson.from_dict(obj.get("payload")) if obj.get("payload") is not None else None,
            "files": [WorkItemFile.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None
        })
        return _obj


