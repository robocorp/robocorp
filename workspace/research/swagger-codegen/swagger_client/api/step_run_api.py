# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StepRunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_step_run(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """Get step run  # noqa: E501

        Returns a specific step run from a process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_run(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: ID of the step run (required)
        :return: StepRunResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_step_run_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_step_run_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
            return data

    def get_step_run_with_http_info(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """Get step run  # noqa: E501

        Returns a specific step run from a process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_run_with_http_info(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: ID of the step run (required)
        :return: StepRunResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'step_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_step_run`")  # noqa: E501
        # verify the required parameter 'step_run_id' is set
        if ('step_run_id' not in params or
                params['step_run_id'] is None):
            raise ValueError("Missing the required parameter `step_run_id` when calling `get_step_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'step_run_id' in params:
            path_params['step_run_id'] = params['step_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/step-runs/{step_run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StepRunResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_step_run_artifact(self, workspace_id, step_run_id, artifact_id, **kwargs):  # noqa: E501
        """Get step run artifact  # noqa: E501

        Returns a step run artifact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_run_artifact(workspace_id, step_run_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: ID of the step run (required)
        :param str artifact_id: ID of the artifact to retrieve (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_step_run_artifact_with_http_info(workspace_id, step_run_id, artifact_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_step_run_artifact_with_http_info(workspace_id, step_run_id, artifact_id, **kwargs)  # noqa: E501
            return data

    def get_step_run_artifact_with_http_info(self, workspace_id, step_run_id, artifact_id, **kwargs):  # noqa: E501
        """Get step run artifact  # noqa: E501

        Returns a step run artifact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_run_artifact_with_http_info(workspace_id, step_run_id, artifact_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: ID of the step run (required)
        :param str artifact_id: ID of the artifact to retrieve (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'step_run_id', 'artifact_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_run_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_step_run_artifact`")  # noqa: E501
        # verify the required parameter 'step_run_id' is set
        if ('step_run_id' not in params or
                params['step_run_id'] is None):
            raise ValueError("Missing the required parameter `step_run_id` when calling `get_step_run_artifact`")  # noqa: E501
        # verify the required parameter 'artifact_id' is set
        if ('artifact_id' not in params or
                params['artifact_id'] is None):
            raise ValueError("Missing the required parameter `artifact_id` when calling `get_step_run_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'step_run_id' in params:
            path_params['step_run_id'] = params['step_run_id']  # noqa: E501
        if 'artifact_id' in params:
            path_params['artifact_id'] = params['artifact_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/step-runs/{step_run_id}/artifacts/{artifact_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_step_run_artifacts(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """List step run artifacts  # noqa: E501

        Returns the list of all artifacts for a step run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_run_artifacts(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: Step Run ID (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_step_run_artifacts_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_step_run_artifacts_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
            return data

    def list_step_run_artifacts_with_http_info(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """List step run artifacts  # noqa: E501

        Returns the list of all artifacts for a step run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_run_artifacts_with_http_info(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: Step Run ID (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'step_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_step_run_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_step_run_artifacts`")  # noqa: E501
        # verify the required parameter 'step_run_id' is set
        if ('step_run_id' not in params or
                params['step_run_id'] is None):
            raise ValueError("Missing the required parameter `step_run_id` when calling `list_step_run_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'step_run_id' in params:
            path_params['step_run_id'] = params['step_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/step-runs/{step_run_id}/artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_step_run_console_messages(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """List step run console messages  # noqa: E501

        Returns all logged console messages for a step run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_run_console_messages(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: Step Run ID (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_step_run_console_messages_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_step_run_console_messages_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
            return data

    def list_step_run_console_messages_with_http_info(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """List step run console messages  # noqa: E501

        Returns all logged console messages for a step run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_run_console_messages_with_http_info(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: Step Run ID (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'step_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_step_run_console_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_step_run_console_messages`")  # noqa: E501
        # verify the required parameter 'step_run_id' is set
        if ('step_run_id' not in params or
                params['step_run_id'] is None):
            raise ValueError("Missing the required parameter `step_run_id` when calling `list_step_run_console_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'step_run_id' in params:
            path_params['step_run_id'] = params['step_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/step-runs/{step_run_id}/console-messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_step_run_events(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """List step run events  # noqa: E501

        Returns the events of a step run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_run_events(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: ID of the step run (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_step_run_events_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_step_run_events_with_http_info(workspace_id, step_run_id, **kwargs)  # noqa: E501
            return data

    def list_step_run_events_with_http_info(self, workspace_id, step_run_id, **kwargs):  # noqa: E501
        """List step run events  # noqa: E501

        Returns the events of a step run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_run_events_with_http_info(workspace_id, step_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str step_run_id: ID of the step run (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'step_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_step_run_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_step_run_events`")  # noqa: E501
        # verify the required parameter 'step_run_id' is set
        if ('step_run_id' not in params or
                params['step_run_id'] is None):
            raise ValueError("Missing the required parameter `step_run_id` when calling `list_step_run_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'step_run_id' in params:
            path_params['step_run_id'] = params['step_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/step-runs/{step_run_id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_step_runs(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """List step runs of process run  # noqa: E501

        Returns the list of all step runs for a process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_runs(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_run_id: ID of the process run (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_step_runs_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_step_runs_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
            return data

    def list_step_runs_with_http_info(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """List step runs of process run  # noqa: E501

        Returns the list of all step runs for a process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_step_runs_with_http_info(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_run_id: ID of the process run (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_step_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_step_runs`")  # noqa: E501
        # verify the required parameter 'process_run_id' is set
        if ('process_run_id' not in params or
                params['process_run_id'] is None):
            raise ValueError("Missing the required parameter `process_run_id` when calling `list_step_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_run_id' in params:
            path_params['process_run_id'] = params['process_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/process-runs/{process_run_id}/step-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
