# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkerGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_worker_to_group(self, body, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Add worker to worker group  # noqa: E501

        Adds an existing worker to the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_worker_to_group(body, workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkerGroupIdWorkersBody body: The id of the worker to add to the worker group
 (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to add the worker to (required)
        :return: WorkerToGroupLinkListing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_worker_to_group_with_http_info(body, workspace_id, worker_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_worker_to_group_with_http_info(body, workspace_id, worker_group_id, **kwargs)  # noqa: E501
            return data

    def add_worker_to_group_with_http_info(self, body, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Add worker to worker group  # noqa: E501

        Adds an existing worker to the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_worker_to_group_with_http_info(body, workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkerGroupIdWorkersBody body: The id of the worker to add to the worker group
 (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to add the worker to (required)
        :return: WorkerToGroupLinkListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'worker_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_worker_to_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_worker_to_group`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `add_worker_to_group`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `add_worker_to_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/workers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerToGroupLinkListing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_worker_group(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create worker group  # noqa: E501

        Creates a new worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_worker_group(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdWorkergroupsBody body: The name of the worker group to create (required)
        :param str workspace_id: The id of the workspace under which the worker group should be created. (required)
        :return: WorkerGroupResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_worker_group_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_worker_group_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
            return data

    def create_worker_group_with_http_info(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create worker group  # noqa: E501

        Creates a new worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_worker_group_with_http_info(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdWorkergroupsBody body: The name of the worker group to create (required)
        :param str workspace_id: The id of the workspace under which the worker group should be created. (required)
        :return: WorkerGroupResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_worker_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_worker_group`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_worker_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerGroupResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_worker_group_link_token(self, body, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Create worker group link token  # noqa: E501

        Generates and returns a link token used to link a worker to the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_worker_group_link_token(body, workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkerGroupIdLinktokensBody body: The name of the worker group link token to create
 (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :return: WorkerGroupLinkTokenResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_worker_group_link_token_with_http_info(body, workspace_id, worker_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_worker_group_link_token_with_http_info(body, workspace_id, worker_group_id, **kwargs)  # noqa: E501
            return data

    def create_worker_group_link_token_with_http_info(self, body, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Create worker group link token  # noqa: E501

        Generates and returns a link token used to link a worker to the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_worker_group_link_token_with_http_info(body, workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkerGroupIdLinktokensBody body: The name of the worker group link token to create
 (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :return: WorkerGroupLinkTokenResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'worker_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_worker_group_link_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `create_worker_group_link_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerGroupLinkTokenResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_worker_group(self, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Delete worker group  # noqa: E501

        Deletes the requested worker group. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_worker_group(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_worker_group_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_worker_group_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501
            return data

    def delete_worker_group_with_http_info(self, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Delete worker group  # noqa: E501

        Deletes the requested worker group. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_worker_group_with_http_info(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'worker_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_worker_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_worker_group`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `delete_worker_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_worker_group_link_token(self, workspace_id, worker_group_id, link_token_id, **kwargs):  # noqa: E501
        """Delete worker group link token  # noqa: E501

        Deletes the requested link token. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_worker_group_link_token(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :param str link_token_id: The id of the worker group link token to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501
            return data

    def delete_worker_group_link_token_with_http_info(self, workspace_id, worker_group_id, link_token_id, **kwargs):  # noqa: E501
        """Delete worker group link token  # noqa: E501

        Deletes the requested link token. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :param str link_token_id: The id of the worker group link token to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'worker_group_id', 'link_token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_worker_group_link_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `delete_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'link_token_id' is set
        if ('link_token_id' not in params or
                params['link_token_id'] is None):
            raise ValueError("Missing the required parameter `link_token_id` when calling `delete_worker_group_link_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501
        if 'link_token_id' in params:
            path_params['link_token_id'] = params['link_token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_worker_group(self, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Get worker group  # noqa: E501

        Returns a worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worker_group(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to retrieve. (required)
        :return: WorkerGroupResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_worker_group_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_worker_group_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501
            return data

    def get_worker_group_with_http_info(self, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Get worker group  # noqa: E501

        Returns a worker group linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worker_group_with_http_info(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to retrieve. (required)
        :return: WorkerGroupResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'worker_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_worker_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_worker_group`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `get_worker_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerGroupResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_worker_group_link_token(self, workspace_id, worker_group_id, link_token_id, **kwargs):  # noqa: E501
        """Get worker group link token  # noqa: E501

        Returns a link token for the requested work group. **Note**: For security reasons, the Link Token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worker_group_link_token(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :param str link_token_id: The id of the worker group link token to retrieve. (required)
        :return: WorkerGroupLinkTokenResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501
            return data

    def get_worker_group_link_token_with_http_info(self, workspace_id, worker_group_id, link_token_id, **kwargs):  # noqa: E501
        """Get worker group link token  # noqa: E501

        Returns a link token for the requested work group. **Note**: For security reasons, the Link Token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_worker_group_link_token_with_http_info(workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :param str link_token_id: The id of the worker group link token to retrieve. (required)
        :return: WorkerGroupLinkTokenResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'worker_group_id', 'link_token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_worker_group_link_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `get_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'link_token_id' is set
        if ('link_token_id' not in params or
                params['link_token_id'] is None):
            raise ValueError("Missing the required parameter `link_token_id` when calling `get_worker_group_link_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501
        if 'link_token_id' in params:
            path_params['link_token_id'] = params['link_token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerGroupLinkTokenResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_worker_group_link_tokens(self, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """List worker group link tokens  # noqa: E501

        Returns a list of all link tokens for the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_worker_group_link_tokens(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link tokens belong. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_worker_group_link_tokens_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_worker_group_link_tokens_with_http_info(workspace_id, worker_group_id, **kwargs)  # noqa: E501
            return data

    def list_worker_group_link_tokens_with_http_info(self, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """List worker group link tokens  # noqa: E501

        Returns a list of all link tokens for the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_worker_group_link_tokens_with_http_info(workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link tokens belong. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'worker_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_worker_group_link_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_worker_group_link_tokens`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `list_worker_group_link_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_worker_groups(self, workspace_id, **kwargs):  # noqa: E501
        """List worker groups  # noqa: E501

        Returns a list of all worker groups linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_worker_groups(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace to list worker groups for (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_worker_groups_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_worker_groups_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def list_worker_groups_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List worker groups  # noqa: E501

        Returns a list of all worker groups linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_worker_groups_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace to list worker groups for (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_worker_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_worker_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_worker_from_group(self, workspace_id, worker_group_id, worker_id, **kwargs):  # noqa: E501
        """Remove worker from worker group  # noqa: E501

        Removes an existing worker from the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_worker_from_group(workspace_id, worker_group_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to remove the worker from (required)
        :param str worker_id: The id of the worker to remove from the worker group (required)
        :return: WorkerToGroupLinkListing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_worker_from_group_with_http_info(workspace_id, worker_group_id, worker_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_worker_from_group_with_http_info(workspace_id, worker_group_id, worker_id, **kwargs)  # noqa: E501
            return data

    def remove_worker_from_group_with_http_info(self, workspace_id, worker_group_id, worker_id, **kwargs):  # noqa: E501
        """Remove worker from worker group  # noqa: E501

        Removes an existing worker from the requested worker group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_worker_from_group_with_http_info(workspace_id, worker_group_id, worker_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to remove the worker from (required)
        :param str worker_id: The id of the worker to remove from the worker group (required)
        :return: WorkerToGroupLinkListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'worker_group_id', 'worker_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_worker_from_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `remove_worker_from_group`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `remove_worker_from_group`")  # noqa: E501
        # verify the required parameter 'worker_id' is set
        if ('worker_id' not in params or
                params['worker_id'] is None):
            raise ValueError("Missing the required parameter `worker_id` when calling `remove_worker_from_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501
        if 'worker_id' in params:
            path_params['worker_id'] = params['worker_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/workers/{worker_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerToGroupLinkListing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_worker_group(self, body, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Update worker group  # noqa: E501

        Updates the requested worker group by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_worker_group(body, workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkergroupsWorkerGroupIdBody body: The worker group details to update (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to update. (required)
        :return: WorkerGroupResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_worker_group_with_http_info(body, workspace_id, worker_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_worker_group_with_http_info(body, workspace_id, worker_group_id, **kwargs)  # noqa: E501
            return data

    def update_worker_group_with_http_info(self, body, workspace_id, worker_group_id, **kwargs):  # noqa: E501
        """Update worker group  # noqa: E501

        Updates the requested worker group by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_worker_group_with_http_info(body, workspace_id, worker_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkergroupsWorkerGroupIdBody body: The worker group details to update (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to update. (required)
        :return: WorkerGroupResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'worker_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_worker_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_worker_group`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `update_worker_group`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `update_worker_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerGroupResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_worker_group_link_token(self, body, workspace_id, worker_group_id, link_token_id, **kwargs):  # noqa: E501
        """Update worker group link token  # noqa: E501

        Updates a link token by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_worker_group_link_token(body, workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinktokensLinkTokenIdBody body: The name of the worker group link token to update (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :param str link_token_id: The id of the worker group link token to update. (required)
        :return: WorkerGroupLinkTokenResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_worker_group_link_token_with_http_info(body, workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_worker_group_link_token_with_http_info(body, workspace_id, worker_group_id, link_token_id, **kwargs)  # noqa: E501
            return data

    def update_worker_group_link_token_with_http_info(self, body, workspace_id, worker_group_id, link_token_id, **kwargs):  # noqa: E501
        """Update worker group link token  # noqa: E501

        Updates a link token by setting only the values defined in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_worker_group_link_token_with_http_info(body, workspace_id, worker_group_id, link_token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LinktokensLinkTokenIdBody body: The name of the worker group link token to update (required)
        :param str workspace_id: The id of the workspace on which the worker group resides. (required)
        :param str worker_group_id: The id of the worker group to which the link token belongs. (required)
        :param str link_token_id: The id of the worker group link token to update. (required)
        :return: WorkerGroupLinkTokenResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'worker_group_id', 'link_token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_worker_group_link_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `update_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'worker_group_id' is set
        if ('worker_group_id' not in params or
                params['worker_group_id'] is None):
            raise ValueError("Missing the required parameter `worker_group_id` when calling `update_worker_group_link_token`")  # noqa: E501
        # verify the required parameter 'link_token_id' is set
        if ('link_token_id' not in params or
                params['link_token_id'] is None):
            raise ValueError("Missing the required parameter `link_token_id` when calling `update_worker_group_link_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'worker_group_id' in params:
            path_params['worker_group_id'] = params['worker_group_id']  # noqa: E501
        if 'link_token_id' in params:
            path_params['link_token_id'] = params['link_token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkerGroupLinkTokenResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
