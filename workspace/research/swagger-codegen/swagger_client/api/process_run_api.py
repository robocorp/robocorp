# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProcessRunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_process_run(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """Delete process run  # noqa: E501

        Deletes a process run. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_process_run(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the robot resides. (required)
        :param str process_run_id: The id of the process run to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_process_run_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_process_run_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
            return data

    def delete_process_run_with_http_info(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """Delete process run  # noqa: E501

        Deletes a process run. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_process_run_with_http_info(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the robot resides. (required)
        :param str process_run_id: The id of the process run to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_process_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_process_run`")  # noqa: E501
        # verify the required parameter 'process_run_id' is set
        if ('process_run_id' not in params or
                params['process_run_id'] is None):
            raise ValueError("Missing the required parameter `process_run_id` when calling `delete_process_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_run_id' in params:
            path_params['process_run_id'] = params['process_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/process-runs/{process_run_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_process_run(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """Get process run  # noqa: E501

        Returns a process run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_run(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_run_id: ID of the process run (required)
        :return: ProcessRunResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_process_run_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_process_run_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
            return data

    def get_process_run_with_http_info(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """Get process run  # noqa: E501

        Returns a process run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_process_run_with_http_info(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_run_id: ID of the process run (required)
        :return: ProcessRunResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_process_run`")  # noqa: E501
        # verify the required parameter 'process_run_id' is set
        if ('process_run_id' not in params or
                params['process_run_id'] is None):
            raise ValueError("Missing the required parameter `process_run_id` when calling `get_process_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_run_id' in params:
            path_params['process_run_id'] = params['process_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/process-runs/{process_run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProcessRunResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_process_process_runs(self, workspace_id, process_id, **kwargs):  # noqa: E501
        """List process runs of process  # noqa: E501

        Returns a list of all process runs linked to the requested process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_process_runs(workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_id: Process ID (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_process_process_runs_with_http_info(workspace_id, process_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_process_process_runs_with_http_info(workspace_id, process_id, **kwargs)  # noqa: E501
            return data

    def list_process_process_runs_with_http_info(self, workspace_id, process_id, **kwargs):  # noqa: E501
        """List process runs of process  # noqa: E501

        Returns a list of all process runs linked to the requested process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_process_runs_with_http_info(workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_id: Process ID (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_process_process_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_process_process_runs`")  # noqa: E501
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params or
                params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `list_process_process_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/processes/{process_id}/process-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_process_run_outputs(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """List output work items  # noqa: E501

        Returns a list of all output work items for the requested process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_run_outputs(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the process resides. (required)
        :param str process_run_id: The id of the process run for which to list the outputs. (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_process_run_outputs_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_process_run_outputs_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
            return data

    def list_process_run_outputs_with_http_info(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """List output work items  # noqa: E501

        Returns a list of all output work items for the requested process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_run_outputs_with_http_info(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the process resides. (required)
        :param str process_run_id: The id of the process run for which to list the outputs. (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_run_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_process_run_outputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_process_run_outputs`")  # noqa: E501
        # verify the required parameter 'process_run_id' is set
        if ('process_run_id' not in params or
                params['process_run_id'] is None):
            raise ValueError("Missing the required parameter `process_run_id` when calling `list_process_run_outputs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_run_id' in params:
            path_params['process_run_id'] = params['process_run_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/process-runs/{process_run_id}/outputs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_workspace_process_runs(self, workspace_id, **kwargs):  # noqa: E501
        """List process runs  # noqa: E501

        Returns a paginated list of process runs linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workspace_process_runs(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str state: State of process runs
        :param float limit: Limit for paginated response
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_workspace_process_runs_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_workspace_process_runs_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def list_workspace_process_runs_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List process runs  # noqa: E501

        Returns a paginated list of process runs linked to the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workspace_process_runs_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str state: State of process runs
        :param float limit: Limit for paginated response
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'state', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workspace_process_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_workspace_process_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/process-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_process_run(self, workspace_id, process_id, **kwargs):  # noqa: E501
        """Start process run  # noqa: E501

        Starts a process run for the requested process. You may choose to start a process run without work items, with specified work items, or with the work items that are waiting in the input queue of the specified process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_process_run(workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the process resides. (required)
        :param str process_id: The id of the process to start. (required)
        :param ProcessIdProcessrunsBody body: Omitting the request body will start a process run with either the default work item, if configured, or an empty work item.

        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_process_run_with_http_info(workspace_id, process_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_process_run_with_http_info(workspace_id, process_id, **kwargs)  # noqa: E501
            return data

    def start_process_run_with_http_info(self, workspace_id, process_id, **kwargs):  # noqa: E501
        """Start process run  # noqa: E501

        Starts a process run for the requested process. You may choose to start a process run without work items, with specified work items, or with the work items that are waiting in the input queue of the specified process.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_process_run_with_http_info(workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the process resides. (required)
        :param str process_id: The id of the process to start. (required)
        :param ProcessIdProcessrunsBody body: Omitting the request body will start a process run with either the default work item, if configured, or an empty work item.

        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_process_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `start_process_run`")  # noqa: E501
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params or
                params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `start_process_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/processes/{process_id}/process-runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_process_run_qs_auth(self, body, token, workspace_id, process_id, **kwargs):  # noqa: E501
        """Start process run (for integrations)  # noqa: E501

        Starts a process run for the requested process. This endpoint is useful when you don't have control over the **headers** and / or **request body** of the caller and need a plain URL. This includes e.g. certain integration cases. The **full request body** will be provided as the input work item for the process run. The **API Key** must be provided as the value of the `token` query-string parameter. This endpoint supports **webhook handshakes** for added security. Currently we support the protocol employed by [Asana](https://asana.com/). If you are using Asana, use the `with_handshake=asana` query string parameter when constructing the URL to enable Asana webhook handshakes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_process_run_qs_auth(body, token, workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnyValidJson body: Any valid JSON payload.
The full request body is passed as a work item to the process run input.
 (required)
        :param str token: Authorization token (required)
        :param str workspace_id: Workspace ID (required)
        :param str process_id: Process ID (required)
        :param str with_handshake: Handshake type
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_process_run_qs_auth_with_http_info(body, token, workspace_id, process_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_process_run_qs_auth_with_http_info(body, token, workspace_id, process_id, **kwargs)  # noqa: E501
            return data

    def start_process_run_qs_auth_with_http_info(self, body, token, workspace_id, process_id, **kwargs):  # noqa: E501
        """Start process run (for integrations)  # noqa: E501

        Starts a process run for the requested process. This endpoint is useful when you don't have control over the **headers** and / or **request body** of the caller and need a plain URL. This includes e.g. certain integration cases. The **full request body** will be provided as the input work item for the process run. The **API Key** must be provided as the value of the `token` query-string parameter. This endpoint supports **webhook handshakes** for added security. Currently we support the protocol employed by [Asana](https://asana.com/). If you are using Asana, use the `with_handshake=asana` query string parameter when constructing the URL to enable Asana webhook handshakes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_process_run_qs_auth_with_http_info(body, token, workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnyValidJson body: Any valid JSON payload.
The full request body is passed as a work item to the process run input.
 (required)
        :param str token: Authorization token (required)
        :param str workspace_id: Workspace ID (required)
        :param str process_id: Process ID (required)
        :param str with_handshake: Handshake type
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'token', 'workspace_id', 'process_id', 'with_handshake']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_process_run_qs_auth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `start_process_run_qs_auth`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `start_process_run_qs_auth`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `start_process_run_qs_auth`")  # noqa: E501
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params or
                params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `start_process_run_qs_auth`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_handshake' in params:
            query_params.append(('with_handshake', params['with_handshake']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/processes/{process_id}/process-runs-integrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_process_run(self, body, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """Stop process run  # noqa: E501

        Stops the process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_process_run(body, workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProcessRunIdStopBody body: Set whether or not to set the remaining work items as done or terminating the ongoing activity runs, as well as the reason for stopping the process run. (required)
        :param str workspace_id: The id of the workspace on which the process resides. (required)
        :param str process_run_id: The id of the process run to stop. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_process_run_with_http_info(body, workspace_id, process_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_process_run_with_http_info(body, workspace_id, process_run_id, **kwargs)  # noqa: E501
            return data

    def stop_process_run_with_http_info(self, body, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """Stop process run  # noqa: E501

        Stops the process run.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_process_run_with_http_info(body, workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProcessRunIdStopBody body: Set whether or not to set the remaining work items as done or terminating the ongoing activity runs, as well as the reason for stopping the process run. (required)
        :param str workspace_id: The id of the workspace on which the process resides. (required)
        :param str process_run_id: The id of the process run to stop. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'process_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_process_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `stop_process_run`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `stop_process_run`")  # noqa: E501
        # verify the required parameter 'process_run_id' is set
        if ('process_run_id' not in params or
                params['process_run_id'] is None):
            raise ValueError("Missing the required parameter `process_run_id` when calling `stop_process_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_run_id' in params:
            path_params['process_run_id'] = params['process_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/process-runs/{process_run_id}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
