# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TaskPackageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_task_package(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create new task package  # noqa: E501

        Creates a new task package with the given name in the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_package(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdTaskpackagesBody body: The name of the task package to create (required)
        :param str workspace_id: The id of the workspace in which to create the task package (required)
        :return: TaskPackageResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_task_package_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_task_package_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
            return data

    def create_task_package_with_http_info(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create new task package  # noqa: E501

        Creates a new task package with the given name in the requested workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_task_package_with_http_info(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdTaskpackagesBody body: The name of the task package to create (required)
        :param str workspace_id: The id of the workspace in which to create the task package (required)
        :return: TaskPackageResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_task_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_task_package`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_task_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/task-packages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskPackageResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_task_package(self, workspace_id, task_package_id, **kwargs):  # noqa: E501
        """Delete task package  # noqa: E501

        Deletes a specific task package. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task_package(workspace_id, task_package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the task package resides. (required)
        :param str task_package_id: The id of the task package to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_task_package_with_http_info(workspace_id, task_package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_task_package_with_http_info(workspace_id, task_package_id, **kwargs)  # noqa: E501
            return data

    def delete_task_package_with_http_info(self, workspace_id, task_package_id, **kwargs):  # noqa: E501
        """Delete task package  # noqa: E501

        Deletes a specific task package. This action is irreversible!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_task_package_with_http_info(workspace_id, task_package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace on which the task package resides. (required)
        :param str task_package_id: The id of the task package to delete. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'task_package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_task_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_task_package`")  # noqa: E501
        # verify the required parameter 'task_package_id' is set
        if ('task_package_id' not in params or
                params['task_package_id'] is None):
            raise ValueError("Missing the required parameter `task_package_id` when calling `delete_task_package`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'task_package_id' in params:
            path_params['task_package_id'] = params['task_package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/task-packages/{task_package_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_package_download_link(self, workspace_id, task_package_id, **kwargs):  # noqa: E501
        """Get task package download link  # noqa: E501

        Returns a URL to download the task package bundle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_package_download_link(workspace_id, task_package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace in which the task package resides (required)
        :param str task_package_id: The id of the task package to get the download link for (required)
        :return: TaskPackageDownloadLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_package_download_link_with_http_info(workspace_id, task_package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_package_download_link_with_http_info(workspace_id, task_package_id, **kwargs)  # noqa: E501
            return data

    def get_task_package_download_link_with_http_info(self, workspace_id, task_package_id, **kwargs):  # noqa: E501
        """Get task package download link  # noqa: E501

        Returns a URL to download the task package bundle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_package_download_link_with_http_info(workspace_id, task_package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace in which the task package resides (required)
        :param str task_package_id: The id of the task package to get the download link for (required)
        :return: TaskPackageDownloadLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'task_package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_package_download_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_task_package_download_link`")  # noqa: E501
        # verify the required parameter 'task_package_id' is set
        if ('task_package_id' not in params or
                params['task_package_id'] is None):
            raise ValueError("Missing the required parameter `task_package_id` when calling `get_task_package_download_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'task_package_id' in params:
            path_params['task_package_id'] = params['task_package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/task-packages/{task_package_id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskPackageDownloadLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_package_upload_link(self, workspace_id, task_package_id, **kwargs):  # noqa: E501
        """Get task package upload link  # noqa: E501

        Returns a URL + form data payload for uploading the task package bundle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_package_upload_link(workspace_id, task_package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace in which the task package resides (required)
        :param str task_package_id: The id of the task package to get the upload link for (required)
        :return: TaskPackageUploadLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_package_upload_link_with_http_info(workspace_id, task_package_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_package_upload_link_with_http_info(workspace_id, task_package_id, **kwargs)  # noqa: E501
            return data

    def get_task_package_upload_link_with_http_info(self, workspace_id, task_package_id, **kwargs):  # noqa: E501
        """Get task package upload link  # noqa: E501

        Returns a URL + form data payload for uploading the task package bundle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_package_upload_link_with_http_info(workspace_id, task_package_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: The id of the workspace in which the task package resides (required)
        :param str task_package_id: The id of the task package to get the upload link for (required)
        :return: TaskPackageUploadLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'task_package_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_package_upload_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_task_package_upload_link`")  # noqa: E501
        # verify the required parameter 'task_package_id' is set
        if ('task_package_id' not in params or
                params['task_package_id'] is None):
            raise ValueError("Missing the required parameter `task_package_id` when calling `get_task_package_upload_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'task_package_id' in params:
            path_params['task_package_id'] = params['task_package_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/task-packages/{task_package_id}/upload', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskPackageUploadLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
