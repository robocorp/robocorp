# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssistantApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_assistant(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create assistant  # noqa: E501

        Creates a new assistant with the given name and for the specified task inside a task package.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assistant(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdAssistantsBody body: (required)
        :param str workspace_id: Workspace ID (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assistant_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assistant_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
            return data

    def create_assistant_with_http_info(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create assistant  # noqa: E501

        Creates a new assistant with the given name and for the specified task inside a task package.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assistant_with_http_info(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdAssistantsBody body: (required)
        :param str workspace_id: Workspace ID (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_assistant`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/assistants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assistant(self, workspace_id, assistant_id, **kwargs):  # noqa: E501
        """Get assistant  # noqa: E501

        Returns an assistant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assistant(workspace_id, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str assistant_id: Assistant ID (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assistant_with_http_info(workspace_id, assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assistant_with_http_info(workspace_id, assistant_id, **kwargs)  # noqa: E501
            return data

    def get_assistant_with_http_info(self, workspace_id, assistant_id, **kwargs):  # noqa: E501
        """Get assistant  # noqa: E501

        Returns an assistant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assistant_with_http_info(workspace_id, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str assistant_id: Assistant ID (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'assistant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assistant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_assistant`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `get_assistant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'assistant_id' in params:
            path_params['assistant_id'] = params['assistant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/assistants/{assistant_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assistant_run(self, workspace_id, assistant_run_id, **kwargs):  # noqa: E501
        """Get assistant run  # noqa: E501

        Returns an assistant run for the requested assistant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assistant_run(workspace_id, assistant_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str assistant_run_id: Assistant Run ID (required)
        :return: AssistantRunResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assistant_run_with_http_info(workspace_id, assistant_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assistant_run_with_http_info(workspace_id, assistant_run_id, **kwargs)  # noqa: E501
            return data

    def get_assistant_run_with_http_info(self, workspace_id, assistant_run_id, **kwargs):  # noqa: E501
        """Get assistant run  # noqa: E501

        Returns an assistant run for the requested assistant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assistant_run_with_http_info(workspace_id, assistant_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str assistant_run_id: Assistant Run ID (required)
        :return: AssistantRunResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'assistant_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assistant_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_assistant_run`")  # noqa: E501
        # verify the required parameter 'assistant_run_id' is set
        if ('assistant_run_id' not in params or
                params['assistant_run_id'] is None):
            raise ValueError("Missing the required parameter `assistant_run_id` when calling `get_assistant_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'assistant_run_id' in params:
            path_params['assistant_run_id'] = params['assistant_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/assistant-runs/{assistant_run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssistantRunResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assistant_assistant_runs(self, workspace_id, assistant_id, **kwargs):  # noqa: E501
        """List assistant runs for an assistant  # noqa: E501

        Returns a paginated list of assistant runs for the assistant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assistant_assistant_runs(workspace_id, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str assistant_id: Assistant ID (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assistant_assistant_runs_with_http_info(workspace_id, assistant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assistant_assistant_runs_with_http_info(workspace_id, assistant_id, **kwargs)  # noqa: E501
            return data

    def list_assistant_assistant_runs_with_http_info(self, workspace_id, assistant_id, **kwargs):  # noqa: E501
        """List assistant runs for an assistant  # noqa: E501

        Returns a paginated list of assistant runs for the assistant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assistant_assistant_runs_with_http_info(workspace_id, assistant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str assistant_id: Assistant ID (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'assistant_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assistant_assistant_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_assistant_assistant_runs`")  # noqa: E501
        # verify the required parameter 'assistant_id' is set
        if ('assistant_id' not in params or
                params['assistant_id'] is None):
            raise ValueError("Missing the required parameter `assistant_id` when calling `list_assistant_assistant_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'assistant_id' in params:
            path_params['assistant_id'] = params['assistant_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/assistants/{assistant_id}/assistant-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assistants(self, workspace_id, **kwargs):  # noqa: E501
        """List assistants  # noqa: E501

        Returns a paginated list of assistants for the workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assistants(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assistants_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assistants_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def list_assistants_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List assistants  # noqa: E501

        Returns a paginated list of assistants for the workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assistants_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assistants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_assistants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/assistants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_workspace_assistant_runs(self, workspace_id, **kwargs):  # noqa: E501
        """List assistant runs for workspace  # noqa: E501

        Returns a paginated list of assistant runs for the workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workspace_assistant_runs(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_workspace_assistant_runs_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_workspace_assistant_runs_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def list_workspace_assistant_runs_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List assistant runs for workspace  # noqa: E501

        Returns a paginated list of assistant runs for the workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_workspace_assistant_runs_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param float limit: Limit for paginated response
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workspace_assistant_runs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_workspace_assistant_runs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/assistant-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
