# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkItemApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_work_item(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create work item  # noqa: E501

        Create a work item for the requested process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_work_item(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdWorkitemsBody body: Process work item payload (required)
        :param str workspace_id: Workspace ID (required)
        :return: WorkItemResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_work_item_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_work_item_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
            return data

    def create_work_item_with_http_info(self, body, workspace_id, **kwargs):  # noqa: E501
        """Create work item  # noqa: E501

        Create a work item for the requested process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_work_item_with_http_info(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIdWorkitemsBody body: Process work item payload (required)
        :param str workspace_id: Workspace ID (required)
        :return: WorkItemResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_work_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_work_item`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_work_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/work-items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkItemResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_work_item_file(self, body, workspace_id, work_item_id, **kwargs):  # noqa: E501
        """Create work item file  # noqa: E501

        Request to upload a work item file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_work_item_file(body, workspace_id, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilesUploadBody body: The name and size of work item file to create (required)
        :param str workspace_id: Workspace ID (required)
        :param str work_item_id: Work Item ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_work_item_file_with_http_info(body, workspace_id, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_work_item_file_with_http_info(body, workspace_id, work_item_id, **kwargs)  # noqa: E501
            return data

    def create_work_item_file_with_http_info(self, body, workspace_id, work_item_id, **kwargs):  # noqa: E501
        """Create work item file  # noqa: E501

        Request to upload a work item file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_work_item_file_with_http_info(body, workspace_id, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilesUploadBody body: The name and size of work item file to create (required)
        :param str workspace_id: Workspace ID (required)
        :param str work_item_id: Work Item ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_work_item_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_work_item_file`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_work_item_file`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `create_work_item_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'work_item_id' in params:
            path_params['work_item_id'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/work-items/{work_item_id}/files/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_work_item(self, workspace_id, work_item_id, **kwargs):  # noqa: E501
        """Get work item  # noqa: E501

        Returns a work item for the requested process. You can specify whether you want to also retrieve the work item's data (payload and/or files) by supplying the `include_data` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item(workspace_id, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str work_item_id: Work Item ID (required)
        :return: WorkItemResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_work_item_with_http_info(workspace_id, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_work_item_with_http_info(workspace_id, work_item_id, **kwargs)  # noqa: E501
            return data

    def get_work_item_with_http_info(self, workspace_id, work_item_id, **kwargs):  # noqa: E501
        """Get work item  # noqa: E501

        Returns a work item for the requested process. You can specify whether you want to also retrieve the work item's data (payload and/or files) by supplying the `include_data` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_with_http_info(workspace_id, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str work_item_id: Work Item ID (required)
        :return: WorkItemResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_work_item`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `get_work_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'work_item_id' in params:
            path_params['work_item_id'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/work-items/{work_item_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkItemResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_process_run_work_items(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """List work items of a process run  # noqa: E501

        Returns a paginated list of work items for the requested process run. You can specify filtering work item by state with `state` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_run_work_items(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_run_id: Process Run ID (required)
        :param float limit: Limit for paginated response
        :param str state: Work item state filter
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_process_run_work_items_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_process_run_work_items_with_http_info(workspace_id, process_run_id, **kwargs)  # noqa: E501
            return data

    def list_process_run_work_items_with_http_info(self, workspace_id, process_run_id, **kwargs):  # noqa: E501
        """List work items of a process run  # noqa: E501

        Returns a paginated list of work items for the requested process run. You can specify filtering work item by state with `state` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_run_work_items_with_http_info(workspace_id, process_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_run_id: Process Run ID (required)
        :param float limit: Limit for paginated response
        :param str state: Work item state filter
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_run_id', 'limit', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_process_run_work_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_process_run_work_items`")  # noqa: E501
        # verify the required parameter 'process_run_id' is set
        if ('process_run_id' not in params or
                params['process_run_id'] is None):
            raise ValueError("Missing the required parameter `process_run_id` when calling `list_process_run_work_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_run_id' in params:
            path_params['process_run_id'] = params['process_run_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/process-runs/{process_run_id}/work-items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_process_work_items(self, workspace_id, process_id, **kwargs):  # noqa: E501
        """List work items of process  # noqa: E501

        Returns a paginated list of work items for the requested process. You can specify filtering work item by state with `state` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_work_items(workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_id: Process ID (required)
        :param float limit: Limit for paginated response
        :param WorkItemState state: Work item state filter
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_process_work_items_with_http_info(workspace_id, process_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_process_work_items_with_http_info(workspace_id, process_id, **kwargs)  # noqa: E501
            return data

    def list_process_work_items_with_http_info(self, workspace_id, process_id, **kwargs):  # noqa: E501
        """List work items of process  # noqa: E501

        Returns a paginated list of work items for the requested process. You can specify filtering work item by state with `state` query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_process_work_items_with_http_info(workspace_id, process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: Workspace ID (required)
        :param str process_id: Process ID (required)
        :param float limit: Limit for paginated response
        :param WorkItemState state: Work item state filter
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'process_id', 'limit', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_process_work_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `list_process_work_items`")  # noqa: E501
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params or
                params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `list_process_work_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/processes/{process_id}/work-items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_work_item_batch_operation(self, body, workspace_id, **kwargs):  # noqa: E501
        """Retry, delete or mark work items as done  # noqa: E501

        Run a batch operation on one or more work items. You can retry, delete or mark failed work items as done.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_work_item_batch_operation(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkitemsBatchBody body: Work item batch operation (required)
        :param str workspace_id: Workspace ID (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_work_item_batch_operation_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.run_work_item_batch_operation_with_http_info(body, workspace_id, **kwargs)  # noqa: E501
            return data

    def run_work_item_batch_operation_with_http_info(self, body, workspace_id, **kwargs):  # noqa: E501
        """Retry, delete or mark work items as done  # noqa: E501

        Run a batch operation on one or more work items. You can retry, delete or mark failed work items as done.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_work_item_batch_operation_with_http_info(body, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkitemsBatchBody body: Work item batch operation (required)
        :param str workspace_id: Workspace ID (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_work_item_batch_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `run_work_item_batch_operation`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `run_work_item_batch_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/work-items/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_work_item_payload(self, body, workspace_id, work_item_id, **kwargs):  # noqa: E501
        """Update work item payload  # noqa: E501

        Update the payload for the requested work item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_work_item_payload(body, workspace_id, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkItemIdPayloadBody body: The updated payload of work item (required)
        :param str workspace_id: Workspace ID (required)
        :param str work_item_id: Work Item ID (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_work_item_payload_with_http_info(body, workspace_id, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_work_item_payload_with_http_info(body, workspace_id, work_item_id, **kwargs)  # noqa: E501
            return data

    def update_work_item_payload_with_http_info(self, body, workspace_id, work_item_id, **kwargs):  # noqa: E501
        """Update work item payload  # noqa: E501

        Update the payload for the requested work item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_work_item_payload_with_http_info(body, workspace_id, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkItemIdPayloadBody body: The updated payload of work item (required)
        :param str workspace_id: Workspace ID (required)
        :param str work_item_id: Work Item ID (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workspace_id', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_work_item_payload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_work_item_payload`")  # noqa: E501
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `update_work_item_payload`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `update_work_item_payload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'work_item_id' in params:
            path_params['work_item_id'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key with permissions']  # noqa: E501

        return self.api_client.call_api(
            '/workspaces/{workspace_id}/work-items/{work_item_id}/payload', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
