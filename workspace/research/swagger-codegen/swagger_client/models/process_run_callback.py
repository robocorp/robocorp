# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessRunCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'secret': 'str',
        'callback_events': 'list[str]'
    }

    attribute_map = {
        'url': 'url',
        'secret': 'secret',
        'callback_events': 'callback_events'
    }

    def __init__(self, url=None, secret=None, callback_events=None):  # noqa: E501
        """ProcessRunCallback - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._secret = None
        self._callback_events = None
        self.discriminator = None
        self.url = url
        self.secret = secret
        self.callback_events = callback_events

    @property
    def url(self):
        """Gets the url of this ProcessRunCallback.  # noqa: E501


        :return: The url of this ProcessRunCallback.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProcessRunCallback.


        :param url: The url of this ProcessRunCallback.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def secret(self):
        """Gets the secret of this ProcessRunCallback.  # noqa: E501


        :return: The secret of this ProcessRunCallback.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ProcessRunCallback.


        :param secret: The secret of this ProcessRunCallback.  # noqa: E501
        :type: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret

    @property
    def callback_events(self):
        """Gets the callback_events of this ProcessRunCallback.  # noqa: E501


        :return: The callback_events of this ProcessRunCallback.  # noqa: E501
        :rtype: list[str]
        """
        return self._callback_events

    @callback_events.setter
    def callback_events(self, callback_events):
        """Sets the callback_events of this ProcessRunCallback.


        :param callback_events: The callback_events of this ProcessRunCallback.  # noqa: E501
        :type: list[str]
        """
        if callback_events is None:
            raise ValueError("Invalid value for `callback_events`, must not be `None`")  # noqa: E501
        allowed_values = ["started", "completed", "unresolved"]  # noqa: E501
        if not set(callback_events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `callback_events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(callback_events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._callback_events = callback_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessRunCallback, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessRunCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
