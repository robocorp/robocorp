# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StepRunResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'state_updated_at': 'datetime',
        'error': 'StepRunResourceError',
        'started_at': 'datetime',
        'ended_at': 'datetime',
        'duration': 'float',
        'step': 'InlineResponse20024'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'state_updated_at': 'state_updated_at',
        'error': 'error',
        'started_at': 'started_at',
        'ended_at': 'ended_at',
        'duration': 'duration',
        'step': 'step'
    }

    def __init__(self, id=None, state=None, state_updated_at=None, error=None, started_at=None, ended_at=None, duration=None, step=None):  # noqa: E501
        """StepRunResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._state = None
        self._state_updated_at = None
        self._error = None
        self._started_at = None
        self._ended_at = None
        self._duration = None
        self._step = None
        self.discriminator = None
        self.id = id
        self.state = state
        self.state_updated_at = state_updated_at
        self.error = error
        self.started_at = started_at
        self.ended_at = ended_at
        self.duration = duration
        self.step = step

    @property
    def id(self):
        """Gets the id of this StepRunResource.  # noqa: E501


        :return: The id of this StepRunResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StepRunResource.


        :param id: The id of this StepRunResource.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this StepRunResource.  # noqa: E501


        :return: The state of this StepRunResource.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StepRunResource.


        :param state: The state of this StepRunResource.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["new", "awaiting_worker", "in_progress", "completed", "failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_updated_at(self):
        """Gets the state_updated_at of this StepRunResource.  # noqa: E501


        :return: The state_updated_at of this StepRunResource.  # noqa: E501
        :rtype: datetime
        """
        return self._state_updated_at

    @state_updated_at.setter
    def state_updated_at(self, state_updated_at):
        """Sets the state_updated_at of this StepRunResource.


        :param state_updated_at: The state_updated_at of this StepRunResource.  # noqa: E501
        :type: datetime
        """
        if state_updated_at is None:
            raise ValueError("Invalid value for `state_updated_at`, must not be `None`")  # noqa: E501

        self._state_updated_at = state_updated_at

    @property
    def error(self):
        """Gets the error of this StepRunResource.  # noqa: E501


        :return: The error of this StepRunResource.  # noqa: E501
        :rtype: StepRunResourceError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this StepRunResource.


        :param error: The error of this StepRunResource.  # noqa: E501
        :type: StepRunResourceError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")  # noqa: E501

        self._error = error

    @property
    def started_at(self):
        """Gets the started_at of this StepRunResource.  # noqa: E501


        :return: The started_at of this StepRunResource.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this StepRunResource.


        :param started_at: The started_at of this StepRunResource.  # noqa: E501
        :type: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this StepRunResource.  # noqa: E501


        :return: The ended_at of this StepRunResource.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this StepRunResource.


        :param ended_at: The ended_at of this StepRunResource.  # noqa: E501
        :type: datetime
        """
        if ended_at is None:
            raise ValueError("Invalid value for `ended_at`, must not be `None`")  # noqa: E501

        self._ended_at = ended_at

    @property
    def duration(self):
        """Gets the duration of this StepRunResource.  # noqa: E501


        :return: The duration of this StepRunResource.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this StepRunResource.


        :param duration: The duration of this StepRunResource.  # noqa: E501
        :type: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def step(self):
        """Gets the step of this StepRunResource.  # noqa: E501


        :return: The step of this StepRunResource.  # noqa: E501
        :rtype: InlineResponse20024
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this StepRunResource.


        :param step: The step of this StepRunResource.  # noqa: E501
        :type: InlineResponse20024
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")  # noqa: E501

        self._step = step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StepRunResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StepRunResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
