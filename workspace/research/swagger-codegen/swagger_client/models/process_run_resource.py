# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessRunResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'created_at': 'datetime',
        'started_at': 'datetime',
        'ended_at': 'datetime',
        'process': 'InlineResponse20024',
        'started_by': 'ProcessRunResourceStartedBy',
        'duration': 'float'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'created_at': 'created_at',
        'started_at': 'started_at',
        'ended_at': 'ended_at',
        'process': 'process',
        'started_by': 'started_by',
        'duration': 'duration'
    }

    def __init__(self, id=None, state=None, created_at=None, started_at=None, ended_at=None, process=None, started_by=None, duration=None):  # noqa: E501
        """ProcessRunResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._state = None
        self._created_at = None
        self._started_at = None
        self._ended_at = None
        self._process = None
        self._started_by = None
        self._duration = None
        self.discriminator = None
        self.id = id
        self.state = state
        self.created_at = created_at
        self.started_at = started_at
        self.ended_at = ended_at
        self.process = process
        self.started_by = started_by
        self.duration = duration

    @property
    def id(self):
        """Gets the id of this ProcessRunResource.  # noqa: E501


        :return: The id of this ProcessRunResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProcessRunResource.


        :param id: The id of this ProcessRunResource.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this ProcessRunResource.  # noqa: E501


        :return: The state of this ProcessRunResource.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProcessRunResource.


        :param state: The state of this ProcessRunResource.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["new", "in_progress", "completed", "unresolved", "stopping"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this ProcessRunResource.  # noqa: E501


        :return: The created_at of this ProcessRunResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProcessRunResource.


        :param created_at: The created_at of this ProcessRunResource.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def started_at(self):
        """Gets the started_at of this ProcessRunResource.  # noqa: E501


        :return: The started_at of this ProcessRunResource.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ProcessRunResource.


        :param started_at: The started_at of this ProcessRunResource.  # noqa: E501
        :type: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this ProcessRunResource.  # noqa: E501


        :return: The ended_at of this ProcessRunResource.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this ProcessRunResource.


        :param ended_at: The ended_at of this ProcessRunResource.  # noqa: E501
        :type: datetime
        """
        if ended_at is None:
            raise ValueError("Invalid value for `ended_at`, must not be `None`")  # noqa: E501

        self._ended_at = ended_at

    @property
    def process(self):
        """Gets the process of this ProcessRunResource.  # noqa: E501


        :return: The process of this ProcessRunResource.  # noqa: E501
        :rtype: InlineResponse20024
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this ProcessRunResource.


        :param process: The process of this ProcessRunResource.  # noqa: E501
        :type: InlineResponse20024
        """
        if process is None:
            raise ValueError("Invalid value for `process`, must not be `None`")  # noqa: E501

        self._process = process

    @property
    def started_by(self):
        """Gets the started_by of this ProcessRunResource.  # noqa: E501


        :return: The started_by of this ProcessRunResource.  # noqa: E501
        :rtype: ProcessRunResourceStartedBy
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by):
        """Sets the started_by of this ProcessRunResource.


        :param started_by: The started_by of this ProcessRunResource.  # noqa: E501
        :type: ProcessRunResourceStartedBy
        """
        if started_by is None:
            raise ValueError("Invalid value for `started_by`, must not be `None`")  # noqa: E501

        self._started_by = started_by

    @property
    def duration(self):
        """Gets the duration of this ProcessRunResource.  # noqa: E501

        Process run duration in seconds  # noqa: E501

        :return: The duration of this ProcessRunResource.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ProcessRunResource.

        Process run duration in seconds  # noqa: E501

        :param duration: The duration of this ProcessRunResource.  # noqa: E501
        :type: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessRunResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessRunResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
