# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessRunOutputResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'process': 'ProcessReferenceResource',
        'process_run': 'ProcessRunReferenceResource',
        'payload': 'WorkItemPayload',
        'files': 'list[WorkItemFile]'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'process': 'process',
        'process_run': 'process_run',
        'payload': 'payload',
        'files': 'files'
    }

    def __init__(self, id=None, created_at=None, process=None, process_run=None, payload=None, files=None):  # noqa: E501
        """ProcessRunOutputResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._process = None
        self._process_run = None
        self._payload = None
        self._files = None
        self.discriminator = None
        self.id = id
        self.created_at = created_at
        self.process = process
        self.process_run = process_run
        self.payload = payload
        self.files = files

    @property
    def id(self):
        """Gets the id of this ProcessRunOutputResource.  # noqa: E501


        :return: The id of this ProcessRunOutputResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProcessRunOutputResource.


        :param id: The id of this ProcessRunOutputResource.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this ProcessRunOutputResource.  # noqa: E501


        :return: The created_at of this ProcessRunOutputResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProcessRunOutputResource.


        :param created_at: The created_at of this ProcessRunOutputResource.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def process(self):
        """Gets the process of this ProcessRunOutputResource.  # noqa: E501


        :return: The process of this ProcessRunOutputResource.  # noqa: E501
        :rtype: ProcessReferenceResource
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this ProcessRunOutputResource.


        :param process: The process of this ProcessRunOutputResource.  # noqa: E501
        :type: ProcessReferenceResource
        """
        if process is None:
            raise ValueError("Invalid value for `process`, must not be `None`")  # noqa: E501

        self._process = process

    @property
    def process_run(self):
        """Gets the process_run of this ProcessRunOutputResource.  # noqa: E501


        :return: The process_run of this ProcessRunOutputResource.  # noqa: E501
        :rtype: ProcessRunReferenceResource
        """
        return self._process_run

    @process_run.setter
    def process_run(self, process_run):
        """Sets the process_run of this ProcessRunOutputResource.


        :param process_run: The process_run of this ProcessRunOutputResource.  # noqa: E501
        :type: ProcessRunReferenceResource
        """
        if process_run is None:
            raise ValueError("Invalid value for `process_run`, must not be `None`")  # noqa: E501

        self._process_run = process_run

    @property
    def payload(self):
        """Gets the payload of this ProcessRunOutputResource.  # noqa: E501


        :return: The payload of this ProcessRunOutputResource.  # noqa: E501
        :rtype: WorkItemPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ProcessRunOutputResource.


        :param payload: The payload of this ProcessRunOutputResource.  # noqa: E501
        :type: WorkItemPayload
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    @property
    def files(self):
        """Gets the files of this ProcessRunOutputResource.  # noqa: E501


        :return: The files of this ProcessRunOutputResource.  # noqa: E501
        :rtype: list[WorkItemFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ProcessRunOutputResource.


        :param files: The files of this ProcessRunOutputResource.  # noqa: E501
        :type: list[WorkItemFile]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessRunOutputResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessRunOutputResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
