# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import StrictStr, StrictBool
from robocorp.workspace.models.assistant_run_resource_error import AssistantRunResourceError
from robocorp.workspace.models.list_assets200_response_data_inner import ListAssets200ResponseDataInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AssistantRunResource(BaseModel):
    """
    AssistantRunResource
    """ # noqa: E501
    id: StrictStr
    state: StrictStr
    error: Optional[AssistantRunResourceError]
    started_at: datetime
    ended_at: Optional[datetime]
    duration: Optional[Union[StrictFloat, StrictInt]]
    assistant: ListAssets200ResponseDataInner
    __properties: ClassVar[List[str]] = ["id", "state", "error", "started_at", "ended_at", "duration", "assistant"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('in_progress', 'completed', 'failed'):
            raise ValueError("must be one of enum values ('in_progress', 'completed', 'failed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AssistantRunResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assistant
        if self.assistant:
            _dict['assistant'] = self.assistant.to_dict()
        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if ended_at (nullable) is None
        # and model_fields_set contains the field
        if self.ended_at is None and "ended_at" in self.model_fields_set:
            _dict['ended_at'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AssistantRunResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "error": AssistantRunResourceError.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "started_at": obj.get("started_at"),
            "ended_at": obj.get("ended_at"),
            "duration": obj.get("duration"),
            "assistant": ListAssets200ResponseDataInner.from_dict(obj.get("assistant")) if obj.get("assistant") is not None else None
        })
        return _obj


