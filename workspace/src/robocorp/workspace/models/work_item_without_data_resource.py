# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional
from pydantic import BaseModel, StrictStr
from pydantic import StrictStr, StrictBool
from robocorp.workspace.models.add_worker_to_group_request_worker import AddWorkerToGroupRequestWorker
from robocorp.workspace.models.list_webhooks200_response_data_inner_process import ListWebhooks200ResponseDataInnerProcess
from robocorp.workspace.models.work_item_exception import WorkItemException
from robocorp.workspace.models.work_item_state import WorkItemState
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WorkItemWithoutDataResource(BaseModel):
    """
    WorkItemWithoutDataResource
    """ # noqa: E501
    id: StrictStr
    created_at: datetime
    state: WorkItemState
    state_updated_at: Optional[datetime]
    process: AddWorkerToGroupRequestWorker
    process_run: Optional[ListWebhooks200ResponseDataInnerProcess]
    step: Optional[ListWebhooks200ResponseDataInnerProcess]
    step_run: Optional[ListWebhooks200ResponseDataInnerProcess]
    exception: Optional[WorkItemException]
    __properties: ClassVar[List[str]] = ["id", "created_at", "state", "state_updated_at", "process", "process_run", "step", "step_run", "exception"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WorkItemWithoutDataResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_run
        if self.process_run:
            _dict['process_run'] = self.process_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of step
        if self.step:
            _dict['step'] = self.step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of step_run
        if self.step_run:
            _dict['step_run'] = self.step_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exception
        if self.exception:
            _dict['exception'] = self.exception.to_dict()
        # set to None if state_updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.state_updated_at is None and "state_updated_at" in self.model_fields_set:
            _dict['state_updated_at'] = None

        # set to None if process_run (nullable) is None
        # and model_fields_set contains the field
        if self.process_run is None and "process_run" in self.model_fields_set:
            _dict['process_run'] = None

        # set to None if step (nullable) is None
        # and model_fields_set contains the field
        if self.step is None and "step" in self.model_fields_set:
            _dict['step'] = None

        # set to None if step_run (nullable) is None
        # and model_fields_set contains the field
        if self.step_run is None and "step_run" in self.model_fields_set:
            _dict['step_run'] = None

        # set to None if exception (nullable) is None
        # and model_fields_set contains the field
        if self.exception is None and "exception" in self.model_fields_set:
            _dict['exception'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WorkItemWithoutDataResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "state": obj.get("state"),
            "state_updated_at": obj.get("state_updated_at"),
            "process": AddWorkerToGroupRequestWorker.from_dict(obj.get("process")) if obj.get("process") is not None else None,
            "process_run": ListWebhooks200ResponseDataInnerProcess.from_dict(obj.get("process_run")) if obj.get("process_run") is not None else None,
            "step": ListWebhooks200ResponseDataInnerProcess.from_dict(obj.get("step")) if obj.get("step") is not None else None,
            "step_run": ListWebhooks200ResponseDataInnerProcess.from_dict(obj.get("step_run")) if obj.get("step_run") is not None else None,
            "exception": WorkItemException.from_dict(obj.get("exception")) if obj.get("exception") is not None else None
        })
        return _obj


