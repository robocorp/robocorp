# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional
from pydantic import BaseModel, StrictStr
from pydantic import StrictStr, StrictBool
from robocorp.workspace.models.list_webhooks200_response_data_inner_process import ListWebhooks200ResponseDataInnerProcess
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WebhookResource(BaseModel):
    """
    WebhookResource
    """ # noqa: E501
    id: StrictStr
    process: Optional[ListWebhooks200ResponseDataInnerProcess]
    enabled_events: List[StrictStr]
    secret: StrictStr
    endpoint: StrictStr
    __properties: ClassVar[List[str]] = ["id", "process", "enabled_events", "secret", "endpoint"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WebhookResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # set to None if process (nullable) is None
        # and model_fields_set contains the field
        if self.process is None and "process" in self.model_fields_set:
            _dict['process'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WebhookResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "process": ListWebhooks200ResponseDataInnerProcess.from_dict(obj.get("process")) if obj.get("process") is not None else None,
            "enabled_events": obj.get("enabled_events"),
            "secret": obj.get("secret"),
            "endpoint": obj.get("endpoint")
        })
        return _obj


