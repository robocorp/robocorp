# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional
from pydantic import BaseModel, StrictStr
from pydantic import StrictStr, StrictBool
from robocorp.workspace.models.add_worker_to_group_request_worker import AddWorkerToGroupRequestWorker
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WorkerGroupLinkTokenResource(BaseModel):
    """
    WorkerGroupLinkTokenResource
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    expires_at: Optional[datetime]
    worker_group: AddWorkerToGroupRequestWorker
    __properties: ClassVar[List[str]] = ["id", "name", "expires_at", "worker_group"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WorkerGroupLinkTokenResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of worker_group
        if self.worker_group:
            _dict['worker_group'] = self.worker_group.to_dict()
        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WorkerGroupLinkTokenResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "expires_at": obj.get("expires_at"),
            "worker_group": AddWorkerToGroupRequestWorker.from_dict(obj.get("worker_group")) if obj.get("worker_group") is not None else None
        })
        return _obj


