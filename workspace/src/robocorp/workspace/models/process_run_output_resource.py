# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional
from pydantic import BaseModel, StrictStr
from pydantic import StrictStr, StrictBool
from robocorp.workspace.models.any_valid_json import AnyValidJson
from robocorp.workspace.models.work_item_file import WorkItemFile
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProcessRunOutputResource(BaseModel):
    """
    ProcessRunOutputResource
    """ # noqa: E501
    id: StrictStr
    created_at: datetime
    process: Union[str, Any]
    process_run: Union[str, Any]
    payload: AnyValidJson
    files: List[WorkItemFile]
    __properties: ClassVar[List[str]] = ["id", "created_at", "process", "process_run", "payload", "files"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcessRunOutputResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of process
        if self.process:
            _dict['process'] = self.process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_run
        if self.process_run:
            _dict['process_run'] = self.process_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcessRunOutputResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "process": ProcessReferenceResource.from_dict(obj.get("process")) if obj.get("process") is not None else None,
            "process_run": ProcessRunReferenceResource.from_dict(obj.get("process_run")) if obj.get("process_run") is not None else None,
            "payload": AnyValidJson.from_dict(obj.get("payload")) if obj.get("payload") is not None else None,
            "files": [WorkItemFile.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None
        })
        return _obj


