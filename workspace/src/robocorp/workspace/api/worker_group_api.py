# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from robocorp.workspace.models.add_worker_to_group_request import AddWorkerToGroupRequest
from robocorp.workspace.models.create_worker_group_link_token_request import CreateWorkerGroupLinkTokenRequest
from robocorp.workspace.models.delete_worker200_response import DeleteWorker200Response
from robocorp.workspace.models.list_worker_group_link_tokens200_response import ListWorkerGroupLinkTokens200Response
from robocorp.workspace.models.list_worker_groups200_response import ListWorkerGroups200Response
from robocorp.workspace.models.update_worker_request import UpdateWorkerRequest
from robocorp.workspace.models.worker_group_link_token_resource import WorkerGroupLinkTokenResource
from robocorp.workspace.models.worker_group_resource import WorkerGroupResource
from robocorp.workspace.models.worker_to_group_link_listing import WorkerToGroupLinkListing

from robocorp.workspace.api_client import ApiClient
from robocorp.workspace.api_response import ApiResponse
from robocorp.workspace.rest import RESTResponseType


class WorkerGroupApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_worker_to_group(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to add the worker to")],
        add_worker_to_group_request: Annotated[AddWorkerToGroupRequest, Field(description="The id of the worker to add to the worker group ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerToGroupLinkListing:
        """Add worker to worker group

        Adds an existing worker to the requested worker group.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to add the worker to (required)
        :type worker_group_id: str
        :param add_worker_to_group_request: The id of the worker to add to the worker group  (required)
        :type add_worker_to_group_request: AddWorkerToGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_worker_to_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            add_worker_to_group_request=add_worker_to_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_worker_to_group_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to add the worker to")],
        add_worker_to_group_request: Annotated[AddWorkerToGroupRequest, Field(description="The id of the worker to add to the worker group ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerToGroupLinkListing]:
        """Add worker to worker group

        Adds an existing worker to the requested worker group.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to add the worker to (required)
        :type worker_group_id: str
        :param add_worker_to_group_request: The id of the worker to add to the worker group  (required)
        :type add_worker_to_group_request: AddWorkerToGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_worker_to_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            add_worker_to_group_request=add_worker_to_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_worker_to_group_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to add the worker to")],
        add_worker_to_group_request: Annotated[AddWorkerToGroupRequest, Field(description="The id of the worker to add to the worker group ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add worker to worker group

        Adds an existing worker to the requested worker group.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to add the worker to (required)
        :type worker_group_id: str
        :param add_worker_to_group_request: The id of the worker to add to the worker group  (required)
        :type add_worker_to_group_request: AddWorkerToGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_worker_to_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            add_worker_to_group_request=add_worker_to_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_worker_to_group_serialize(
        self,
        workspace_id,
        worker_group_id,
        add_worker_to_group_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if add_worker_to_group_request is not None:
            _body_params = add_worker_to_group_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}/workers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_worker_group(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace under which the worker group should be created.")],
        update_worker_request: Annotated[UpdateWorkerRequest, Field(description="The name of the worker group to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerGroupResource:
        """Create worker group

        Creates a new worker group linked to the requested workspace.

        :param workspace_id: The id of the workspace under which the worker group should be created. (required)
        :type workspace_id: str
        :param update_worker_request: The name of the worker group to create (required)
        :type update_worker_request: UpdateWorkerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_worker_group_serialize(
            workspace_id=workspace_id,
            update_worker_request=update_worker_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_worker_group_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace under which the worker group should be created.")],
        update_worker_request: Annotated[UpdateWorkerRequest, Field(description="The name of the worker group to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerGroupResource]:
        """Create worker group

        Creates a new worker group linked to the requested workspace.

        :param workspace_id: The id of the workspace under which the worker group should be created. (required)
        :type workspace_id: str
        :param update_worker_request: The name of the worker group to create (required)
        :type update_worker_request: UpdateWorkerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_worker_group_serialize(
            workspace_id=workspace_id,
            update_worker_request=update_worker_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_worker_group_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace under which the worker group should be created.")],
        update_worker_request: Annotated[UpdateWorkerRequest, Field(description="The name of the worker group to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create worker group

        Creates a new worker group linked to the requested workspace.

        :param workspace_id: The id of the workspace under which the worker group should be created. (required)
        :type workspace_id: str
        :param update_worker_request: The name of the worker group to create (required)
        :type update_worker_request: UpdateWorkerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_worker_group_serialize(
            workspace_id=workspace_id,
            update_worker_request=update_worker_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_worker_group_serialize(
        self,
        workspace_id,
        update_worker_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_worker_request is not None:
            _body_params = update_worker_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/workspaces/{workspace_id}/worker-groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_worker_group_link_token(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        create_worker_group_link_token_request: Annotated[CreateWorkerGroupLinkTokenRequest, Field(description="The name of the worker group link token to create ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerGroupLinkTokenResource:
        """Create worker group link token

        Generates and returns a link token used to link a worker to the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to create  (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            create_worker_group_link_token_request=create_worker_group_link_token_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_worker_group_link_token_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        create_worker_group_link_token_request: Annotated[CreateWorkerGroupLinkTokenRequest, Field(description="The name of the worker group link token to create ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerGroupLinkTokenResource]:
        """Create worker group link token

        Generates and returns a link token used to link a worker to the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to create  (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            create_worker_group_link_token_request=create_worker_group_link_token_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_worker_group_link_token_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        create_worker_group_link_token_request: Annotated[CreateWorkerGroupLinkTokenRequest, Field(description="The name of the worker group link token to create ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create worker group link token

        Generates and returns a link token used to link a worker to the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to create  (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            create_worker_group_link_token_request=create_worker_group_link_token_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_worker_group_link_token_serialize(
        self,
        workspace_id,
        worker_group_id,
        create_worker_group_link_token_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_worker_group_link_token_request is not None:
            _body_params = create_worker_group_link_token_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_worker_group(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteWorker200Response:
        """Delete worker group

        Deletes the requested worker group. This action is irreversible!

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to delete. (required)
        :type worker_group_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteWorker200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_worker_group_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteWorker200Response]:
        """Delete worker group

        Deletes the requested worker group. This action is irreversible!

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to delete. (required)
        :type worker_group_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteWorker200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_worker_group_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete worker group

        Deletes the requested worker group. This action is irreversible!

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to delete. (required)
        :type worker_group_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteWorker200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_worker_group_serialize(
        self,
        workspace_id,
        worker_group_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_worker_group_link_token(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteWorker200Response:
        """Delete worker group link token

        Deletes the requested link token. This action is irreversible!

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to delete. (required)
        :type link_token_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteWorker200Response",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_worker_group_link_token_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteWorker200Response]:
        """Delete worker group link token

        Deletes the requested link token. This action is irreversible!

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to delete. (required)
        :type link_token_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteWorker200Response",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_worker_group_link_token_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete worker group link token

        Deletes the requested link token. This action is irreversible!

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to delete. (required)
        :type link_token_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteWorker200Response",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_worker_group_link_token_serialize(
        self,
        workspace_id,
        worker_group_id,
        link_token_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        if link_token_id is not None:
            _path_params['link_token_id'] = link_token_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_worker_group(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerGroupResource:
        """Get worker group

        Returns a worker group linked to the requested workspace.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to retrieve. (required)
        :type worker_group_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_worker_group_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerGroupResource]:
        """Get worker group

        Returns a worker group linked to the requested workspace.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to retrieve. (required)
        :type worker_group_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_worker_group_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get worker group

        Returns a worker group linked to the requested workspace.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to retrieve. (required)
        :type worker_group_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_worker_group_serialize(
        self,
        workspace_id,
        worker_group_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_worker_group_link_token(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerGroupLinkTokenResource:
        """Get worker group link token

        Returns a link token for the requested work group. **Note**: For security reasons, the Link Token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to retrieve. (required)
        :type link_token_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_worker_group_link_token_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerGroupLinkTokenResource]:
        """Get worker group link token

        Returns a link token for the requested work group. **Note**: For security reasons, the Link Token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to retrieve. (required)
        :type link_token_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_worker_group_link_token_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get worker group link token

        Returns a link token for the requested work group. **Note**: For security reasons, the Link Token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to retrieve. (required)
        :type link_token_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_worker_group_link_token_serialize(
        self,
        workspace_id,
        worker_group_id,
        link_token_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        if link_token_id is not None:
            _path_params['link_token_id'] = link_token_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_worker_group_link_tokens(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link tokens belong.")],
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Limit for paginated response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListWorkerGroupLinkTokens200Response:
        """List worker group link tokens

        Returns a list of all link tokens for the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link tokens belong. (required)
        :type worker_group_id: str
        :param limit: Limit for paginated response
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_worker_group_link_tokens_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWorkerGroupLinkTokens200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_worker_group_link_tokens_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link tokens belong.")],
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Limit for paginated response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListWorkerGroupLinkTokens200Response]:
        """List worker group link tokens

        Returns a list of all link tokens for the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link tokens belong. (required)
        :type worker_group_id: str
        :param limit: Limit for paginated response
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_worker_group_link_tokens_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWorkerGroupLinkTokens200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_worker_group_link_tokens_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link tokens belong.")],
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Limit for paginated response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List worker group link tokens

        Returns a list of all link tokens for the requested worker group. **Note:** For security reasons, the link token value can be retrieved in Control Room only. 

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link tokens belong. (required)
        :type worker_group_id: str
        :param limit: Limit for paginated response
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_worker_group_link_tokens_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWorkerGroupLinkTokens200Response",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_worker_group_link_tokens_serialize(
        self,
        workspace_id,
        worker_group_id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_worker_groups(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace to list worker groups for")],
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Limit for paginated response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListWorkerGroups200Response:
        """List worker groups

        Returns a list of all worker groups linked to the requested workspace.

        :param workspace_id: The id of the workspace to list worker groups for (required)
        :type workspace_id: str
        :param limit: Limit for paginated response
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_worker_groups_serialize(
            workspace_id=workspace_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWorkerGroups200Response",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_worker_groups_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace to list worker groups for")],
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Limit for paginated response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListWorkerGroups200Response]:
        """List worker groups

        Returns a list of all worker groups linked to the requested workspace.

        :param workspace_id: The id of the workspace to list worker groups for (required)
        :type workspace_id: str
        :param limit: Limit for paginated response
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_worker_groups_serialize(
            workspace_id=workspace_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWorkerGroups200Response",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_worker_groups_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace to list worker groups for")],
        limit: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Limit for paginated response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List worker groups

        Returns a list of all worker groups linked to the requested workspace.

        :param workspace_id: The id of the workspace to list worker groups for (required)
        :type workspace_id: str
        :param limit: Limit for paginated response
        :type limit: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_worker_groups_serialize(
            workspace_id=workspace_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWorkerGroups200Response",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_worker_groups_serialize(
        self,
        workspace_id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workspaces/{workspace_id}/worker-groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def remove_worker_from_group(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to remove the worker from")],
        worker_id: Annotated[StrictStr, Field(description="The id of the worker to remove from the worker group")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerToGroupLinkListing:
        """Remove worker from worker group

        Removes an existing worker from the requested worker group.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to remove the worker from (required)
        :type worker_group_id: str
        :param worker_id: The id of the worker to remove from the worker group (required)
        :type worker_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_worker_from_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            worker_id=worker_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def remove_worker_from_group_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to remove the worker from")],
        worker_id: Annotated[StrictStr, Field(description="The id of the worker to remove from the worker group")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerToGroupLinkListing]:
        """Remove worker from worker group

        Removes an existing worker from the requested worker group.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to remove the worker from (required)
        :type worker_group_id: str
        :param worker_id: The id of the worker to remove from the worker group (required)
        :type worker_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_worker_from_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            worker_id=worker_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def remove_worker_from_group_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to remove the worker from")],
        worker_id: Annotated[StrictStr, Field(description="The id of the worker to remove from the worker group")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove worker from worker group

        Removes an existing worker from the requested worker group.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to remove the worker from (required)
        :type worker_group_id: str
        :param worker_id: The id of the worker to remove from the worker group (required)
        :type worker_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_worker_from_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            worker_id=worker_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerToGroupLinkListing",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _remove_worker_from_group_serialize(
        self,
        workspace_id,
        worker_group_id,
        worker_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        if worker_id is not None:
            _path_params['worker_id'] = worker_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}/workers/{worker_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_worker_group(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to update.")],
        update_worker_request: Annotated[UpdateWorkerRequest, Field(description="The worker group details to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerGroupResource:
        """Update worker group

        Updates the requested worker group by setting only the values defined in the request body.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to update. (required)
        :type worker_group_id: str
        :param update_worker_request: The worker group details to update (required)
        :type update_worker_request: UpdateWorkerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            update_worker_request=update_worker_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_worker_group_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to update.")],
        update_worker_request: Annotated[UpdateWorkerRequest, Field(description="The worker group details to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerGroupResource]:
        """Update worker group

        Updates the requested worker group by setting only the values defined in the request body.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to update. (required)
        :type worker_group_id: str
        :param update_worker_request: The worker group details to update (required)
        :type update_worker_request: UpdateWorkerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            update_worker_request=update_worker_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_worker_group_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to update.")],
        update_worker_request: Annotated[UpdateWorkerRequest, Field(description="The worker group details to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update worker group

        Updates the requested worker group by setting only the values defined in the request body.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to update. (required)
        :type worker_group_id: str
        :param update_worker_request: The worker group details to update (required)
        :type update_worker_request: UpdateWorkerRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_worker_group_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            update_worker_request=update_worker_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse",
            '404': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_worker_group_serialize(
        self,
        workspace_id,
        worker_group_id,
        update_worker_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_worker_request is not None:
            _body_params = update_worker_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_worker_group_link_token(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to update.")],
        create_worker_group_link_token_request: Annotated[CreateWorkerGroupLinkTokenRequest, Field(description="The name of the worker group link token to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkerGroupLinkTokenResource:
        """Update worker group link token

        Updates a link token by setting only the values defined in the request body.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to update. (required)
        :type link_token_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to update (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            create_worker_group_link_token_request=create_worker_group_link_token_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_worker_group_link_token_with_http_info(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to update.")],
        create_worker_group_link_token_request: Annotated[CreateWorkerGroupLinkTokenRequest, Field(description="The name of the worker group link token to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkerGroupLinkTokenResource]:
        """Update worker group link token

        Updates a link token by setting only the values defined in the request body.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to update. (required)
        :type link_token_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to update (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            create_worker_group_link_token_request=create_worker_group_link_token_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_worker_group_link_token_without_preload_content(
        self,
        workspace_id: Annotated[StrictStr, Field(description="The id of the workspace on which the worker group resides.")],
        worker_group_id: Annotated[StrictStr, Field(description="The id of the worker group to which the link token belongs.")],
        link_token_id: Annotated[StrictStr, Field(description="The id of the worker group link token to update.")],
        create_worker_group_link_token_request: Annotated[CreateWorkerGroupLinkTokenRequest, Field(description="The name of the worker group link token to update")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update worker group link token

        Updates a link token by setting only the values defined in the request body.

        :param workspace_id: The id of the workspace on which the worker group resides. (required)
        :type workspace_id: str
        :param worker_group_id: The id of the worker group to which the link token belongs. (required)
        :type worker_group_id: str
        :param link_token_id: The id of the worker group link token to update. (required)
        :type link_token_id: str
        :param create_worker_group_link_token_request: The name of the worker group link token to update (required)
        :type create_worker_group_link_token_request: CreateWorkerGroupLinkTokenRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_worker_group_link_token_serialize(
            workspace_id=workspace_id,
            worker_group_id=worker_group_id,
            link_token_id=link_token_id,
            create_worker_group_link_token_request=create_worker_group_link_token_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkerGroupLinkTokenResource",
            '400': "GenericErrorResponse",
            '403': "GenericErrorResponse"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_worker_group_link_token_serialize(
        self,
        workspace_id,
        worker_group_id,
        link_token_id,
        create_worker_group_link_token_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if workspace_id is not None:
            _path_params['workspace_id'] = workspace_id
        if worker_group_id is not None:
            _path_params['worker_group_id'] = worker_group_id
        if link_token_id is not None:
            _path_params['link_token_id'] = link_token_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_worker_group_link_token_request is not None:
            _body_params = create_worker_group_link_token_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'API Key with permissions'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/workspaces/{workspace_id}/worker-groups/{worker_group_id}/link-tokens/{link_token_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


